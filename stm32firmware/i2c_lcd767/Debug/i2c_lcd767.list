
i2c_lcd767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007eac  08007eac  00017eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f0c  08007f0c  000205fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f14  08007f14  000205fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005fc  20000000  08007f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001994  200005fc  08008518  000205fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f90  08008518  00021f90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000205fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e38  00000000  00000000  0002062a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003568  00000000  00000000  00038462  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  0003b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  0003c940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ae91  00000000  00000000  0003d718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101bf  00000000  00000000  000685a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5fd0  00000000  00000000  00078768  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016e738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  0016e7b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200005fc 	.word	0x200005fc
 8000214:	00000000 	.word	0x00000000
 8000218:	08007e94 	.word	0x08007e94

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000600 	.word	0x20000600
 8000234:	08007e94 	.word	0x08007e94

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fc6d 	bl	8000e1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f818 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f8dc 	bl	8000700 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000548:	f000 f8aa 	bl	80006a0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800054c:	f006 fe26 	bl	800719c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000550:	f000 f9b3 	bl	80008ba <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (newFrameAvailable == 1)
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <main+0x34>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b01      	cmp	r3, #1
 800055c:	d1fa      	bne.n	8000554 <main+0x1c>
	  {
		  OLED_DisplayLogo((uint8_t*)&image[0]);
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <main+0x38>)
 8000560:	f000 fa78 	bl	8000a54 <OLED_DisplayLogo>
		  newFrameAvailable = 0;
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <main+0x34>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
	  if (newFrameAvailable == 1)
 800056a:	e7f3      	b.n	8000554 <main+0x1c>
 800056c:	20000618 	.word	0x20000618
 8000570:	20000000 	.word	0x20000000

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0b8      	sub	sp, #224	; 0xe0
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f007 fbc4 	bl	8007d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2290      	movs	r2, #144	; 0x90
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f007 fbb5 	bl	8007d10 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005a6:	f002 f94b 	bl	8002840 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <SystemClock_Config+0x120>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	4a39      	ldr	r2, [pc, #228]	; (8000694 <SystemClock_Config+0x120>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b4:	6413      	str	r3, [r2, #64]	; 0x40
 80005b6:	4b37      	ldr	r3, [pc, #220]	; (8000694 <SystemClock_Config+0x120>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <SystemClock_Config+0x124>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a34      	ldr	r2, [pc, #208]	; (8000698 <SystemClock_Config+0x124>)
 80005c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	4b32      	ldr	r3, [pc, #200]	; (8000698 <SystemClock_Config+0x124>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005da:	2301      	movs	r3, #1
 80005dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005fc:	23d8      	movs	r3, #216	; 0xd8
 80005fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000608:	2309      	movs	r3, #9
 800060a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f974 	bl	8002900 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061e:	f000 f945 	bl	80008ac <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000622:	f002 f91d 	bl	8002860 <HAL_PWREx_EnableOverDrive>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800062c:	f000 f93e 	bl	80008ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000642:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800064a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000652:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000656:	2107      	movs	r1, #7
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fbff 	bl	8002e5c <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000664:	f000 f922 	bl	80008ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <SystemClock_Config+0x128>)
 800066a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800066c:	2300      	movs	r3, #0
 800066e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fde6 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000686:	f000 f911 	bl	80008ac <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	37e0      	adds	r7, #224	; 0xe0
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000
 800069c:	00200100 	.word	0x00200100

080006a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART3_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART3_UART_Init+0x58>)
 80006e4:	f003 f9d8 	bl	8003a98 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f8dd 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000630 	.word	0x20000630
 80006fc:	40004800 	.word	0x40004800

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b5f      	ldr	r3, [pc, #380]	; (8000894 <MX_GPIO_Init+0x194>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a5e      	ldr	r2, [pc, #376]	; (8000894 <MX_GPIO_Init+0x194>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b5c      	ldr	r3, [pc, #368]	; (8000894 <MX_GPIO_Init+0x194>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4b59      	ldr	r3, [pc, #356]	; (8000894 <MX_GPIO_Init+0x194>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a58      	ldr	r2, [pc, #352]	; (8000894 <MX_GPIO_Init+0x194>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b56      	ldr	r3, [pc, #344]	; (8000894 <MX_GPIO_Init+0x194>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b53      	ldr	r3, [pc, #332]	; (8000894 <MX_GPIO_Init+0x194>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a52      	ldr	r2, [pc, #328]	; (8000894 <MX_GPIO_Init+0x194>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b50      	ldr	r3, [pc, #320]	; (8000894 <MX_GPIO_Init+0x194>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <MX_GPIO_Init+0x194>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a4c      	ldr	r2, [pc, #304]	; (8000894 <MX_GPIO_Init+0x194>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b4a      	ldr	r3, [pc, #296]	; (8000894 <MX_GPIO_Init+0x194>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <MX_GPIO_Init+0x194>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a46      	ldr	r2, [pc, #280]	; (8000894 <MX_GPIO_Init+0x194>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b44      	ldr	r3, [pc, #272]	; (8000894 <MX_GPIO_Init+0x194>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <MX_GPIO_Init+0x194>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a40      	ldr	r2, [pc, #256]	; (8000894 <MX_GPIO_Init+0x194>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <MX_GPIO_Init+0x194>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2140      	movs	r1, #64	; 0x40
 80007aa:	483b      	ldr	r0, [pc, #236]	; (8000898 <MX_GPIO_Init+0x198>)
 80007ac:	f000 fe70 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80007b6:	4839      	ldr	r0, [pc, #228]	; (800089c <MX_GPIO_Init+0x19c>)
 80007b8:	f000 fe6a 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c2:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <MX_GPIO_Init+0x1a0>)
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4834      	ldr	r0, [pc, #208]	; (80008a4 <MX_GPIO_Init+0x1a4>)
 80007d2:	f000 fcb3 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007d6:	2332      	movs	r3, #50	; 0x32
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	482c      	ldr	r0, [pc, #176]	; (80008a4 <MX_GPIO_Init+0x1a4>)
 80007f2:	f000 fca3 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007f6:	2386      	movs	r3, #134	; 0x86
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000806:	230b      	movs	r3, #11
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4825      	ldr	r0, [pc, #148]	; (80008a8 <MX_GPIO_Init+0x1a8>)
 8000812:	f000 fc93 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000816:	2340      	movs	r3, #64	; 0x40
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <MX_GPIO_Init+0x198>)
 800082e:	f000 fc85 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_GPIO_Init+0x198>)
 8000846:	f000 fc79 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800084a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085c:	230b      	movs	r3, #11
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_GPIO_Init+0x198>)
 8000868:	f000 fc68 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800086c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0x19c>)
 8000886:	f000 fc59 	bl	800113c <HAL_GPIO_Init>

}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40021800 	.word	0x40021800
 800089c:	40020400 	.word	0x40020400
 80008a0:	10110000 	.word	0x10110000
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <OLED_Init>:
 * description  :This function is used to initialize the OLED in the normal mode.
                After initializing the OLED, It clears the OLED and sets the cursor to first line first position. .

 **************************************************************************************************/
void OLED_Init(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
    oledSendCommand(SSD1306_DISPLAY_OFF);
 80008be:	20ae      	movs	r0, #174	; 0xae
 80008c0:	f000 f952 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
 80008c4:	20d5      	movs	r0, #213	; 0xd5
 80008c6:	f000 f94f 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0x80);
 80008ca:	2080      	movs	r0, #128	; 0x80
 80008cc:	f000 f94c 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
 80008d0:	20a8      	movs	r0, #168	; 0xa8
 80008d2:	f000 f949 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0x3F);
 80008d6:	203f      	movs	r0, #63	; 0x3f
 80008d8:	f000 f946 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
 80008dc:	20d3      	movs	r0, #211	; 0xd3
 80008de:	f000 f943 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0x0);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 f940 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_START_LINE | 0x0);
 80008e8:	2040      	movs	r0, #64	; 0x40
 80008ea:	f000 f93d 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_CHARGE_PUMP);
 80008ee:	208d      	movs	r0, #141	; 0x8d
 80008f0:	f000 f93a 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0x14);
 80008f4:	2014      	movs	r0, #20
 80008f6:	f000 f937 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
 80008fa:	2020      	movs	r0, #32
 80008fc:	f000 f934 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f000 f931 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
 8000906:	20a1      	movs	r0, #161	; 0xa1
 8000908:	f000 f92e 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
 800090c:	20c8      	movs	r0, #200	; 0xc8
 800090e:	f000 f92b 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_COM_PINS);
 8000912:	20da      	movs	r0, #218	; 0xda
 8000914:	f000 f928 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0x12);
 8000918:	2012      	movs	r0, #18
 800091a:	f000 f925 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 800091e:	2081      	movs	r0, #129	; 0x81
 8000920:	f000 f922 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0xCF);
 8000924:	20cf      	movs	r0, #207	; 0xcf
 8000926:	f000 f91f 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
 800092a:	20d9      	movs	r0, #217	; 0xd9
 800092c:	f000 f91c 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0xF1);
 8000930:	20f1      	movs	r0, #241	; 0xf1
 8000932:	f000 f919 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_SET_VCOM_DESELECT);
 8000936:	20db      	movs	r0, #219	; 0xdb
 8000938:	f000 f916 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0x40);
 800093c:	2040      	movs	r0, #64	; 0x40
 800093e:	f000 f913 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
 8000942:	20a4      	movs	r0, #164	; 0xa4
 8000944:	f000 f910 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_NORMAL_DISPLAY);
 8000948:	20a6      	movs	r0, #166	; 0xa6
 800094a:	f000 f90d 	bl	8000b68 <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ON);
 800094e:	20af      	movs	r0, #175	; 0xaf
 8000950:	f000 f90a 	bl	8000b68 <oledSendCommand>

    OLED_Clear();  /* Clear the complete LCD during init */
 8000954:	f000 f802 	bl	800095c <OLED_Clear>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <OLED_Clear>:
 * Return value    : none

 * description  :This function clears the LCD and moves the cursor to beginning of first line
 ****************************************************************************************************/
void OLED_Clear()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
    int i;

    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 8000962:	2021      	movs	r0, #33	; 0x21
 8000964:	f000 f900 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0);
 8000968:	2000      	movs	r0, #0
 800096a:	f000 f8fd 	bl	8000b68 <oledSendCommand>
    oledSendCommand(127);
 800096e:	207f      	movs	r0, #127	; 0x7f
 8000970:	f000 f8fa 	bl	8000b68 <oledSendCommand>

    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 8000974:	2022      	movs	r0, #34	; 0x22
 8000976:	f000 f8f7 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0);
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f8f4 	bl	8000b68 <oledSendCommand>
    oledSendCommand(7);
 8000980:	2007      	movs	r0, #7
 8000982:	f000 f8f1 	bl	8000b68 <oledSendCommand>


    oledSendStart(SSD1306_ADDRESS<<1);
 8000986:	2078      	movs	r0, #120	; 0x78
 8000988:	f000 f888 	bl	8000a9c <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 800098c:	2040      	movs	r0, #64	; 0x40
 800098e:	f000 f8be 	bl	8000b0e <oledSendByte>
    /*uint8_t transmitBuf[1];
    transmitBuf[0]= SSD1306_DATA_CONTINUE;
    HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDRESS << 1, transmitBuf, 1, I2C_TRANSMIT_TIMEOUT);*/

    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	e005      	b.n	80009a4 <OLED_Clear+0x48>
    {
        oledSendByte(0);
 8000998:	2000      	movs	r0, #0
 800099a:	f000 f8b8 	bl	8000b0e <oledSendByte>
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3301      	adds	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009aa:	dbf5      	blt.n	8000998 <OLED_Clear+0x3c>
    }

    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 80009ac:	2021      	movs	r0, #33	; 0x21
 80009ae:	f000 f8db 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f8d8 	bl	8000b68 <oledSendCommand>
    oledSendCommand(127);
 80009b8:	207f      	movs	r0, #127	; 0x7f
 80009ba:	f000 f8d5 	bl	8000b68 <oledSendCommand>

    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 80009be:	2022      	movs	r0, #34	; 0x22
 80009c0:	f000 f8d2 	bl	8000b68 <oledSendCommand>
    oledSendCommand(0);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 f8cf 	bl	8000b68 <oledSendCommand>
    oledSendCommand(7);
 80009ca:	2007      	movs	r0, #7
 80009cc:	f000 f8cc 	bl	8000b68 <oledSendCommand>

    oledSendStart(SSD1306_ADDRESS<<1);
 80009d0:	2078      	movs	r0, #120	; 0x78
 80009d2:	f000 f863 	bl	8000a9c <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 80009d6:	2040      	movs	r0, #64	; 0x40
 80009d8:	f000 f899 	bl	8000b0e <oledSendByte>

    //HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDRESS << 1, transmitBuf, 1, I2C_TRANSMIT_TIMEOUT);
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <OLED_SetCursor>:

                   Note:If the Input(Line/Char number) are out of range
                        then no action will be taken
 ****************************************************************************************************/
void OLED_SetCursor(uint8_t lineNumber,uint8_t cursorPosition)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
    /* Move the Cursor to specified position only if it is in range */
    if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	d823      	bhi.n	8000a42 <OLED_SetCursor+0x5e>
 80009fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db1f      	blt.n	8000a42 <OLED_SetCursor+0x5e>
    {
        OledLineNum=lineNumber;   /* Save the specified line number */
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <OLED_SetCursor+0x68>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	7013      	strb	r3, [r2, #0]
        OledCursorPos=cursorPosition; /* Save the specified cursor position */
 8000a08:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <OLED_SetCursor+0x6c>)
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	7013      	strb	r3, [r2, #0]

        oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 8000a0e:	2021      	movs	r0, #33	; 0x21
 8000a10:	f000 f8aa 	bl	8000b68 <oledSendCommand>
        oledSendCommand(cursorPosition);
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f8a6 	bl	8000b68 <oledSendCommand>
        oledSendCommand(127);
 8000a1c:	207f      	movs	r0, #127	; 0x7f
 8000a1e:	f000 f8a3 	bl	8000b68 <oledSendCommand>

        oledSendCommand(SSD1306_SET_PAGE_ADDR);
 8000a22:	2022      	movs	r0, #34	; 0x22
 8000a24:	f000 f8a0 	bl	8000b68 <oledSendCommand>
        oledSendCommand(lineNumber);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f89c 	bl	8000b68 <oledSendCommand>
        oledSendCommand(7);
 8000a30:	2007      	movs	r0, #7
 8000a32:	f000 f899 	bl	8000b68 <oledSendCommand>

        oledSendStart(SSD1306_ADDRESS<<1);
 8000a36:	2078      	movs	r0, #120	; 0x78
 8000a38:	f000 f830 	bl	8000a9c <oledSendStart>
        oledSendByte(SSD1306_DATA_CONTINUE);
 8000a3c:	2040      	movs	r0, #64	; 0x40
 8000a3e:	f000 f866 	bl	8000b0e <oledSendByte>
        /*uint8_t transmitBuf[1];
        transmitBuf[0]= SSD1306_DATA_CONTINUE;
        HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDRESS << 1, transmitBuf, 1, I2C_TRANSMIT_TIMEOUT);*/
    }
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200006b0 	.word	0x200006b0
 8000a50:	200006b1 	.word	0x200006b1

08000a54 <OLED_DisplayLogo>:
               User can enable/disable the inversion of the dislpay by using the below functions.
               OLED_EnableInversion/OLED_DisableInversion
 ****************************************************************************************************/
#if (Enable_OLED_DisplayLogo == 1)
void OLED_DisplayLogo(volatile uint8_t *ptr_Logo)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    int i;

    OLED_SetCursor(0,0);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff ffc0 	bl	80009e4 <OLED_SetCursor>

    oledSendStart(SSD1306_ADDRESS<<1);
 8000a64:	2078      	movs	r0, #120	; 0x78
 8000a66:	f000 f819 	bl	8000a9c <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 8000a6a:	2040      	movs	r0, #64	; 0x40
 8000a6c:	f000 f84f 	bl	8000b0e <oledSendByte>
    /*uint8_t transmitBuf[1];
    transmitBuf[0]= SSD1306_DATA_CONTINUE;
    HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDRESS << 1, transmitBuf, 1, I2C_TRANSMIT_TIMEOUT);*/

    for ( i=0; i<1024; i++)      // Send data
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e00a      	b.n	8000a8c <OLED_DisplayLogo+0x38>
    {
        oledSendByte(ptr_Logo[i]);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f844 	bl	8000b0e <oledSendByte>
    for ( i=0; i<1024; i++)      // Send data
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a92:	dbf0      	blt.n	8000a76 <OLED_DisplayLogo+0x22>
    }
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <oledSendStart>:
/********************************************************************************
                Local FUnctions for sending the command/data
 ********************************************************************************/

void oledSendStart(uint8_t address)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
    /*uint8_t transmitBuf[1];
    transmitBuf[0]= address;
    HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDRESS << 1, transmitBuf, 1, I2C_TRANSMIT_TIMEOUT);

    HAL_GPIO_WritePin(GPIO, GPIO_Pin, PinState)*/
    SDA(LOW);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f874 	bl	8000b94 <SDA>
    SDA(HIGH);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f871 	bl	8000b94 <SDA>
    SCL(HIGH);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f000 f88a 	bl	8000bcc <SCL>
    SDA(LOW);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 f86b 	bl	8000b94 <SDA>
    SCL(LOW);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f884 	bl	8000bcc <SCL>
    oledSendByte(address);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f821 	bl	8000b0e <oledSendByte>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <oledSendStop>:


void oledSendStop()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

    SDA(LOW);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 f85b 	bl	8000b94 <SDA>
    SCL(HIGH);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 f874 	bl	8000bcc <SCL>
    SDA(LOW);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 f855 	bl	8000b94 <SDA>
    SDA(HIGH);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f000 f852 	bl	8000b94 <SDA>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <oledWaitForAck>:


void oledWaitForAck()
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    SDA(HIGH); //Configure SDA_PIN as Input to read the ACK                //delay_us(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f000 f84b 	bl	8000b94 <SDA>
    SCL(HIGH);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 f864 	bl	8000bcc <SCL>
    //GPIOB->MODER &= ~((1 << 18) | (1 << 19));
    //while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_SET);
    //HAL_Delay(1);
    //GPIOB->MODER |= (1 << 18) | (1 << 19);
    SCL(LOW);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 f861 	bl	8000bcc <SCL>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <oledSendByte>:


void oledSendByte(uint8_t ch)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b084      	sub	sp, #16
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
    int8_t i;

    SCL(LOW);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 f857 	bl	8000bcc <SCL>
    for ( i = 7; i>=0; i--)
 8000b1e:	2307      	movs	r3, #7
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	e017      	b.n	8000b54 <oledSendByte+0x46>
    {
        SDA((ch >> (i)) & 0x1);
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	fa42 f303 	asr.w	r3, r2, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f82c 	bl	8000b94 <SDA>
        SCL(HIGH);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 f845 	bl	8000bcc <SCL>
        SCL(LOW);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f842 	bl	8000bcc <SCL>
    for ( i = 7; i>=0; i--)
 8000b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dae3      	bge.n	8000b24 <oledSendByte+0x16>
    }

    oledWaitForAck();
 8000b5c:	f7ff ffca 	bl	8000af4 <oledWaitForAck>
    /*uint8_t transmitBuf[1];
    transmitBuf[0]= ch;
    HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDRESS << 1, transmitBuf, 1, I2C_TRANSMIT_TIMEOUT);*/
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <oledSendCommand>:


void oledSendCommand(uint8_t cmd)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
    oledSendStart(SSD1306_ADDRESS<<1);
 8000b72:	2078      	movs	r0, #120	; 0x78
 8000b74:	f7ff ff92 	bl	8000a9c <oledSendStart>
    oledSendByte(SSD1306_COMMAND);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff ffc8 	bl	8000b0e <oledSendByte>

    oledSendByte(cmd);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ffc4 	bl	8000b0e <oledSendByte>
    oledSendStop();
 8000b86:	f7ff ffa5 	bl	8000ad4 <oledSendStop>

    /*uint8_t transmitBuf[2];
    transmitBuf[0]= SSD1306_COMMAND;
    transmitBuf[1] = cmd;
    HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDRESS << 1, transmitBuf, 2, I2C_TRANSMIT_TIMEOUT);*/
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <SDA>:

void SDA(uint8_t logic_level)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	if (logic_level == HIGH)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d106      	bne.n	8000bb2 <SDA+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <SDA+0x34>)
 8000bac:	f000 fc70 	bl	8001490 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
	}
	//HAL_Delay(1);
}
 8000bb0:	e005      	b.n	8000bbe <SDA+0x2a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <SDA+0x34>)
 8000bba:	f000 fc69 	bl	8001490 <HAL_GPIO_WritePin>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020400 	.word	0x40020400

08000bcc <SCL>:

void SCL(uint8_t logic_level)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	if (logic_level == HIGH)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d106      	bne.n	8000bea <SCL+0x1e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <SCL+0x34>)
 8000be4:	f000 fc54 	bl	8001490 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
	}
	//HAL_Delay(1);
}
 8000be8:	e005      	b.n	8000bf6 <SCL+0x2a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <SCL+0x34>)
 8000bf2:	f000 fc4d 	bl	8001490 <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40020400 	.word	0x40020400

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x44>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x44>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x44>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x44>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x44>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x44>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_UART_MspInit+0x7c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d128      	bne.n	8000cc0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0x80>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <HAL_UART_MspInit+0x80>)
 8000c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_UART_MspInit+0x80>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0x80>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_UART_MspInit+0x80>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_UART_MspInit+0x80>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000cbc:	f000 fa3e 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40004800 	.word	0x40004800
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020c00 	.word	0x40020c00

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f8b4 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <OTG_FS_IRQHandler+0x10>)
 8000d36:	f000 fd0a 	bl	800174e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20001b88 	.word	0x20001b88

08000d44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x50>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x16>
		heap_end = &end;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <_sbrk+0x50>)
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <_sbrk+0x54>)
 8000d58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <_sbrk+0x50>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <_sbrk+0x50>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	466a      	mov	r2, sp
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d907      	bls.n	8000d7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d6e:	f006 ff95 	bl	8007c9c <__errno>
 8000d72:	4602      	mov	r2, r0
 8000d74:	230c      	movs	r3, #12
 8000d76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	e006      	b.n	8000d8c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <_sbrk+0x50>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <_sbrk+0x50>)
 8000d88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000061c 	.word	0x2000061c
 8000d98:	20001f90 	.word	0x20001f90

08000d9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <SystemInit+0x28>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <SystemInit+0x28>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SystemInit+0x28>)
 8000db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db6:	609a      	str	r2, [r3, #8]
#endif
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dce:	e003      	b.n	8000dd8 <LoopCopyDataInit>

08000dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dd6:	3104      	adds	r1, #4

08000dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de0:	d3f6      	bcc.n	8000dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000de4:	e002      	b.n	8000dec <LoopFillZerobss>

08000de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000de8:	f842 3b04 	str.w	r3, [r2], #4

08000dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df0:	d3f9      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ffd3 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f006 ff57 	bl	8007ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fb9d 	bl	8000538 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e04:	08007f1c 	.word	0x08007f1c
  ldr  r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e0c:	200005fc 	.word	0x200005fc
  ldr  r2, =_sbss
 8000e10:	200005fc 	.word	0x200005fc
  ldr  r3, = _ebss
 8000e14:	20001f90 	.word	0x20001f90

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>

08000e1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 f94a 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 f805 	bl	8000e34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e2a:	f7ff feeb 	bl	8000c04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f965 	bl	8001122 <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f92d 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000400 	.word	0x20000400
 8000e8c:	20000408 	.word	0x20000408
 8000e90:	20000404 	.word	0x20000404

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000408 	.word	0x20000408
 8000eb8:	200006b4 	.word	0x200006b4

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200006b4 	.word	0x200006b4

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff ffee 	bl	8000ebc <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_Delay+0x40>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efa:	bf00      	nop
 8000efc:	f7ff ffde 	bl	8000ebc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000408 	.word	0x20000408

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	05fa0000 	.word	0x05fa0000

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff29 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff3e 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff31 	bl	8000f7c <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e175      	b.n	8001448 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8164 	bne.w	8001442 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d00b      	beq.n	800119a <HAL_GPIO_Init+0x5e>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	2b11      	cmp	r3, #17
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b12      	cmp	r3, #18
 8001198:	d130      	bne.n	80011fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x100>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b12      	cmp	r3, #18
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80be 	beq.w	8001442 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b65      	ldr	r3, [pc, #404]	; (800145c <HAL_GPIO_Init+0x320>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a64      	ldr	r2, [pc, #400]	; (800145c <HAL_GPIO_Init+0x320>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b62      	ldr	r3, [pc, #392]	; (800145c <HAL_GPIO_Init+0x320>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012de:	4a60      	ldr	r2, [pc, #384]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a57      	ldr	r2, [pc, #348]	; (8001464 <HAL_GPIO_Init+0x328>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d037      	beq.n	800137a <HAL_GPIO_Init+0x23e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a56      	ldr	r2, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x32c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d031      	beq.n	8001376 <HAL_GPIO_Init+0x23a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a55      	ldr	r2, [pc, #340]	; (800146c <HAL_GPIO_Init+0x330>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02b      	beq.n	8001372 <HAL_GPIO_Init+0x236>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a54      	ldr	r2, [pc, #336]	; (8001470 <HAL_GPIO_Init+0x334>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x232>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a53      	ldr	r2, [pc, #332]	; (8001474 <HAL_GPIO_Init+0x338>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x22e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_GPIO_Init+0x33c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x22a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_GPIO_Init+0x340>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a50      	ldr	r2, [pc, #320]	; (8001480 <HAL_GPIO_Init+0x344>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <HAL_GPIO_Init+0x348>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4e      	ldr	r2, [pc, #312]	; (8001488 <HAL_GPIO_Init+0x34c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x21a>
 8001352:	2309      	movs	r3, #9
 8001354:	e012      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001356:	230a      	movs	r3, #10
 8001358:	e010      	b.n	800137c <HAL_GPIO_Init+0x240>
 800135a:	2308      	movs	r3, #8
 800135c:	e00e      	b.n	800137c <HAL_GPIO_Init+0x240>
 800135e:	2307      	movs	r3, #7
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001362:	2306      	movs	r3, #6
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x240>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x240>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x240>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800138c:	4934      	ldr	r1, [pc, #208]	; (8001460 <HAL_GPIO_Init+0x324>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <HAL_GPIO_Init+0x350>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013be:	4a33      	ldr	r2, [pc, #204]	; (800148c <HAL_GPIO_Init+0x350>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c4:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_GPIO_Init+0x350>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e8:	4a28      	ldr	r2, [pc, #160]	; (800148c <HAL_GPIO_Init+0x350>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_GPIO_Init+0x350>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <HAL_GPIO_Init+0x350>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_GPIO_Init+0x350>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a13      	ldr	r2, [pc, #76]	; (800148c <HAL_GPIO_Init+0x350>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae86 	bls.w	800115c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	3724      	adds	r7, #36	; 0x24
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021c00 	.word	0x40021c00
 8001484:	40022000 	.word	0x40022000
 8001488:	40022400 	.word	0x40022400
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c4:	b08f      	sub	sp, #60	; 0x3c
 80014c6:	af0a      	add	r7, sp, #40	; 0x28
 80014c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e116      	b.n	8001702 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f006 f874 	bl	80075dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 f825 	bl	8004562 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	687e      	ldr	r6, [r7, #4]
 8001520:	466d      	mov	r5, sp
 8001522:	f106 0410 	add.w	r4, r6, #16
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001532:	e885 0003 	stmia.w	r5, {r0, r1}
 8001536:	1d33      	adds	r3, r6, #4
 8001538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153a:	6838      	ldr	r0, [r7, #0]
 800153c:	f002 ff06 	bl	800434c <USB_CoreInit>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2202      	movs	r2, #2
 800154a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0d7      	b.n	8001702 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f813 	bl	8004584 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e04a      	b.n	80015fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	333d      	adds	r3, #61	; 0x3d
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	333c      	adds	r3, #60	; 0x3c
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	b298      	uxth	r0, r3
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3342      	adds	r3, #66	; 0x42
 80015a0:	4602      	mov	r2, r0
 80015a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	333f      	adds	r3, #63	; 0x3f
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3344      	adds	r3, #68	; 0x44
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3348      	adds	r3, #72	; 0x48
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3350      	adds	r3, #80	; 0x50
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3301      	adds	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3af      	bcc.n	8001564 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e044      	b.n	8001694 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	3301      	adds	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3b5      	bcc.n	800160a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	687e      	ldr	r6, [r7, #4]
 80016a6:	466d      	mov	r5, sp
 80016a8:	f106 0410 	add.w	r4, r6, #16
 80016ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016bc:	1d33      	adds	r3, r6, #4
 80016be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f002 ff89 	bl	80045d8 <USB_DevInit>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e014      	b.n	8001702 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d102      	bne.n	80016f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f001 f881 	bl	80027f8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 ffd8 	bl	80056b0 <USB_DevDisconnect>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_PCD_Start+0x16>
 800171c:	2302      	movs	r3, #2
 800171e:	e012      	b.n	8001746 <HAL_PCD_Start+0x3c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f003 ffa7 	bl	8005680 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 ff02 	bl	8004540 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800174e:	b590      	push	{r4, r7, lr}
 8001750:	b08d      	sub	sp, #52	; 0x34
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f004 f84e 	bl	8005806 <USB_GetMode>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 83ca 	bne.w	8001f06 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 ffb2 	bl	80056e0 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 83c0 	beq.w	8001f04 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f003 ffa9 	bl	80056e0 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b02      	cmp	r3, #2
 8001796:	d107      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f002 0202 	and.w	r2, r2, #2
 80017a6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 ff97 	bl	80056e0 <USB_ReadInterrupts>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d161      	bne.n	8001880 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0210 	bic.w	r2, r2, #16
 80017ca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f003 020f 	and.w	r2, r3, #15
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	3304      	adds	r3, #4
 80017ea:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	0c5b      	lsrs	r3, r3, #17
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d124      	bne.n	8001842 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d035      	beq.n	8001870 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800180e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	6a38      	ldr	r0, [r7, #32]
 8001818:	f003 fe0f 	bl	800543a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001828:	441a      	add	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800183a:	441a      	add	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	619a      	str	r2, [r3, #24]
 8001840:	e016      	b.n	8001870 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	0c5b      	lsrs	r3, r3, #17
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	2b06      	cmp	r3, #6
 800184c:	d110      	bne.n	8001870 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001854:	2208      	movs	r2, #8
 8001856:	4619      	mov	r1, r3
 8001858:	6a38      	ldr	r0, [r7, #32]
 800185a:	f003 fdee 	bl	800543a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800186a:	441a      	add	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0210 	orr.w	r2, r2, #16
 800187e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f003 ff2b 	bl	80056e0 <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001890:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001894:	d16e      	bne.n	8001974 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 ff31 	bl	8005706 <USB_ReadDevAllOutEpInterrupt>
 80018a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80018a6:	e062      	b.n	800196e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d057      	beq.n	8001962 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 ff56 	bl	800576e <USB_ReadDevOutEPInterrupt>
 80018c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018da:	461a      	mov	r2, r3
 80018dc:	2301      	movs	r3, #1
 80018de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fdde 	bl	80024a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00c      	beq.n	800190c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fe:	461a      	mov	r2, r3
 8001900:	2308      	movs	r3, #8
 8001902:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fed8 	bl	80026bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001922:	461a      	mov	r2, r3
 8001924:	2310      	movs	r3, #16
 8001926:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	461a      	mov	r2, r3
 8001940:	2320      	movs	r3, #32
 8001942:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195a:	461a      	mov	r2, r3
 800195c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001960:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	d199      	bne.n	80018a8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 feb1 	bl	80056e0 <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001984:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001988:	f040 80c0 	bne.w	8001b0c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fed2 	bl	800573a <USB_ReadDevAllInEpInterrupt>
 8001996:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800199c:	e0b2      	b.n	8001b04 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a7 	beq.w	8001af8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fef8 	bl	80057aa <USB_ReadDevInEPInterrupt>
 80019ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d057      	beq.n	8001a76 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	2201      	movs	r2, #1
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69f9      	ldr	r1, [r7, #28]
 80019e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019e6:	4013      	ands	r3, r2
 80019e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	015a      	lsls	r2, r3, #5
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f6:	461a      	mov	r2, r3
 80019f8:	2301      	movs	r3, #1
 80019fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d132      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3348      	adds	r3, #72	; 0x48
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4403      	add	r3, r0
 8001a24:	3344      	adds	r3, #68	; 0x44
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4419      	add	r1, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4403      	add	r3, r0
 8001a38:	3348      	adds	r3, #72	; 0x48
 8001a3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d113      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x31c>
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3350      	adds	r3, #80	; 0x50
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d108      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a62:	461a      	mov	r2, r3
 8001a64:	2101      	movs	r1, #1
 8001a66:	f003 ff01 	bl	800586c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f005 fe44 	bl	80076fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2308      	movs	r3, #8
 8001a90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	015a      	lsls	r2, r3, #5
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2310      	movs	r3, #16
 8001aac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2340      	movs	r3, #64	; 0x40
 8001ac8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fc48 	bl	8002388 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f47f af49 	bne.w	800199e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fde5 	bl	80056e0 <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b20:	d122      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f006 f826 	bl	8007b9c <HAL_PCDEx_LPM_Callback>
 8001b50:	e002      	b.n	8001b58 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 fe4a 	bl	80077ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fdb7 	bl	80056e0 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b7c:	d112      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f005 fe06 	bl	80077a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ba2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fd99 	bl	80056e0 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bb8:	d121      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001bc8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d111      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	f003 020f 	and.w	r2, r3, #15
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001bee:	2101      	movs	r1, #1
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f005 ffd3 	bl	8007b9c <HAL_PCDEx_LPM_Callback>
 8001bf6:	e002      	b.n	8001bfe <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f005 fdd1 	bl	80077a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fd6c 	bl	80056e0 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c12:	f040 80c7 	bne.w	8001da4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2110      	movs	r1, #16
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fe3f 	bl	80048b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c3a:	e056      	b.n	8001cea <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c60:	0151      	lsls	r1, r2, #5
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	440a      	add	r2, r1
 8001c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c6e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c80:	0151      	lsls	r1, r2, #5
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	440a      	add	r2, r1
 8001c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ca2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb4:	0151      	lsls	r1, r2, #5
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	440a      	add	r2, r1
 8001cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd4:	0151      	lsls	r1, r2, #5
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	440a      	add	r2, r1
 8001cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ce2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d3a3      	bcc.n	8001c3c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d02:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d016      	beq.n	8001d3e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d20:	f043 030b 	orr.w	r3, r3, #11
 8001d24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d36:	f043 030b 	orr.w	r3, r3, #11
 8001d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3c:	e015      	b.n	8001d6a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f242 032b 	movw	r3, #8235	; 0x202b
 8001d52:	4313      	orrs	r3, r2
 8001d54:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d64:	f043 030b 	orr.w	r3, r3, #11
 8001d68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f003 fd6c 	bl	800586c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fc99 	bl	80056e0 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db8:	d124      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fd30 	bl	8005824 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 fdd4 	bl	8004976 <USB_GetDevSpeed>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681c      	ldr	r4, [r3, #0]
 8001dda:	f001 fa03 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8001dde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	4620      	mov	r0, r4
 8001dea:	f002 fb07 	bl	80043fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f005 fcad 	bl	800774e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 fc69 	bl	80056e0 <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d10a      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f005 fc8a 	bl	8007732 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f002 0208 	and.w	r2, r2, #8
 8001e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fc54 	bl	80056e0 <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e42:	d10f      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f005 fcec 	bl	800782c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 fc39 	bl	80056e0 <USB_ReadInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e78:	d10f      	bne.n	8001e9a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f005 fcbf 	bl	8007808 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fc1e 	bl	80056e0 <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d10a      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f005 fccd 	bl	8007850 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fc08 	bl	80056e0 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d115      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f005 fcbd 	bl	800786c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	e000      	b.n	8001f06 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001f04:	bf00      	nop
    }
  }
}
 8001f06:	3734      	adds	r7, #52	; 0x34
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd90      	pop	{r4, r7, pc}

08001f0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_SetAddress+0x1a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e013      	b.n	8001f4e <HAL_PCD_SetAddress+0x42>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fb78 	bl	8005634 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	4608      	mov	r0, r1
 8001f60:	4611      	mov	r1, r2
 8001f62:	461a      	mov	r2, r3
 8001f64:	4603      	mov	r3, r0
 8001f66:	70fb      	strb	r3, [r7, #3]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	803b      	strh	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	da0f      	bge.n	8001f9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 020f 	and.w	r2, r3, #15
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	3338      	adds	r3, #56	; 0x38
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	3304      	adds	r3, #4
 8001f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	705a      	strb	r2, [r3, #1]
 8001f9a:	e00f      	b.n	8001fbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fc8:	883a      	ldrh	r2, [r7, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	78ba      	ldrb	r2, [r7, #2]
 8001fd2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fe6:	78bb      	ldrb	r3, [r7, #2]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d102      	bne.n	8001ff2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_EP_Open+0xaa>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e00e      	b.n	800201e <HAL_PCD_EP_Open+0xc8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68f9      	ldr	r1, [r7, #12]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fcd6 	bl	80049c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800201c:	7afb      	ldrb	r3, [r7, #11]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	da0f      	bge.n	800205a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 020f 	and.w	r2, r3, #15
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	3338      	adds	r3, #56	; 0x38
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	705a      	strb	r2, [r3, #1]
 8002058:	e00f      	b.n	800207a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 020f 	and.w	r2, r3, #15
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	3304      	adds	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_PCD_EP_Close+0x6e>
 8002090:	2302      	movs	r3, #2
 8002092:	e00e      	b.n	80020b2 <HAL_PCD_EP_Close+0x8c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fd14 	bl	8004ad0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	460b      	mov	r3, r1
 80020c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	f003 020f 	and.w	r2, r3, #15
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2200      	movs	r2, #0
 80020fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	b2da      	uxtb	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d102      	bne.n	8002116 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	f002 fff7 	bl	8005120 <USB_EP0StartXfer>
 8002132:	e008      	b.n	8002146 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	6979      	ldr	r1, [r7, #20]
 8002142:	f002 fda1 	bl	8004c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 020f 	and.w	r2, r3, #15
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	460b      	mov	r3, r1
 800218e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	3338      	adds	r3, #56	; 0x38
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2201      	movs	r2, #1
 80021be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	f002 ff95 	bl	8005120 <USB_EP0StartXfer>
 80021f6:	e008      	b.n	800220a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	6979      	ldr	r1, [r7, #20]
 8002206:	f002 fd3f 	bl	8004c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 020f 	and.w	r2, r3, #15
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d901      	bls.n	8002232 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e050      	b.n	80022d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da0f      	bge.n	800225a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	3338      	adds	r3, #56	; 0x38
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	705a      	strb	r2, [r3, #1]
 8002258:	e00d      	b.n	8002276 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	3304      	adds	r3, #4
 800226e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_PCD_EP_SetStall+0x82>
 8002292:	2302      	movs	r3, #2
 8002294:	e01e      	b.n	80022d4 <HAL_PCD_EP_SetStall+0xc0>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68f9      	ldr	r1, [r7, #12]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 f8f1 	bl	800548c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	b2d9      	uxtb	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022c4:	461a      	mov	r2, r3
 80022c6:	f003 fad1 	bl	800586c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	f003 020f 	and.w	r2, r3, #15
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d901      	bls.n	80022fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e042      	b.n	8002380 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da0f      	bge.n	8002322 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	f003 020f 	and.w	r2, r3, #15
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3338      	adds	r3, #56	; 0x38
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	705a      	strb	r2, [r3, #1]
 8002320:	e00f      	b.n	8002342 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 020f 	and.w	r2, r3, #15
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	3304      	adds	r3, #4
 800233a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	b2da      	uxtb	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_PCD_EP_ClrStall+0x86>
 800235e:	2302      	movs	r3, #2
 8002360:	e00e      	b.n	8002380 <HAL_PCD_EP_ClrStall+0xa4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68f9      	ldr	r1, [r7, #12]
 8002370:	4618      	mov	r0, r3
 8002372:	f003 f8f9 	bl	8005568 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af02      	add	r7, sp, #8
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	3338      	adds	r3, #56	; 0x38
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d901      	bls.n	80023c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e06c      	b.n	800249a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d902      	bls.n	80023dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	3303      	adds	r3, #3
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e4:	e02b      	b.n	800243e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d902      	bls.n	8002402 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3303      	adds	r3, #3
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800241a:	b2db      	uxtb	r3, r3
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	4603      	mov	r3, r0
 8002420:	6978      	ldr	r0, [r7, #20]
 8002422:	f002 ffd5 	bl	80053d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	441a      	add	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	441a      	add	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	b29b      	uxth	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	429a      	cmp	r2, r3
 8002452:	d809      	bhi.n	8002468 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800245c:	429a      	cmp	r2, r3
 800245e:	d203      	bcs.n	8002468 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1be      	bne.n	80023e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	429a      	cmp	r2, r3
 8002472:	d811      	bhi.n	8002498 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	2201      	movs	r2, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	43db      	mvns	r3, r3
 800248e:	6939      	ldr	r1, [r7, #16]
 8002490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002494:	4013      	ands	r3, r2
 8002496:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	333c      	adds	r3, #60	; 0x3c
 80024bc:	3304      	adds	r3, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	f040 80a0 	bne.w	800261c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a72      	ldr	r2, [pc, #456]	; (80026b4 <PCD_EP_OutXfrComplete_int+0x210>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f240 80dd 	bls.w	80026aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80d7 	beq.w	80026aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002508:	461a      	mov	r2, r3
 800250a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250e:	6093      	str	r3, [r2, #8]
 8002510:	e0cb      	b.n	80026aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002528:	461a      	mov	r2, r3
 800252a:	2320      	movs	r3, #32
 800252c:	6093      	str	r3, [r2, #8]
 800252e:	e0bc      	b.n	80026aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 80b7 	bne.w	80026aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a5d      	ldr	r2, [pc, #372]	; (80026b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d90f      	bls.n	8002564 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255a:	461a      	mov	r2, r3
 800255c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002560:	6093      	str	r3, [r2, #8]
 8002562:	e0a2      	b.n	80026aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002576:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	0159      	lsls	r1, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	440b      	add	r3, r1
 8002580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800258a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4403      	add	r3, r0
 800259a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800259e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4403      	add	r3, r0
 80025c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4419      	add	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4403      	add	r3, r0
 80025d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d114      	bne.n	800260e <PCD_EP_OutXfrComplete_int+0x16a>
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d108      	bne.n	800260e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002606:	461a      	mov	r2, r3
 8002608:	2101      	movs	r1, #1
 800260a:	f003 f92f 	bl	800586c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f005 f857 	bl	80076c8 <HAL_PCD_DataOutStageCallback>
 800261a:	e046      	b.n	80026aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d124      	bne.n	800266e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	461a      	mov	r2, r3
 800263c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002640:	6093      	str	r3, [r2, #8]
 8002642:	e032      	b.n	80026aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265a:	461a      	mov	r2, r3
 800265c:	2320      	movs	r3, #32
 800265e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4619      	mov	r1, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f005 f82e 	bl	80076c8 <HAL_PCD_DataOutStageCallback>
 800266c:	e01d      	b.n	80026aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d114      	bne.n	800269e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002696:	461a      	mov	r2, r3
 8002698:	2100      	movs	r1, #0
 800269a:	f003 f8e7 	bl	800586c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f005 f80f 	bl	80076c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	4f54300a 	.word	0x4f54300a
 80026b8:	4f54310a 	.word	0x4f54310a

080026bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	333c      	adds	r3, #60	; 0x3c
 80026d4:	3304      	adds	r3, #4
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <PCD_EP_OutSetupPacket_int+0x88>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d90e      	bls.n	8002710 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002708:	461a      	mov	r2, r3
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f004 ffc7 	bl	80076a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <PCD_EP_OutSetupPacket_int+0x88>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d90c      	bls.n	8002738 <PCD_EP_OutSetupPacket_int+0x7c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002730:	461a      	mov	r2, r3
 8002732:	2101      	movs	r1, #1
 8002734:	f003 f89a 	bl	800586c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	4f54300a 	.word	0x4f54300a

08002748 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
 8002754:	4613      	mov	r3, r2
 8002756:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002766:	883b      	ldrh	r3, [r7, #0]
 8002768:	0419      	lsls	r1, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	430a      	orrs	r2, r1
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
 8002774:	e028      	b.n	80027c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4413      	add	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e00d      	b.n	80027a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	3340      	adds	r3, #64	; 0x40
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	4413      	add	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	3301      	adds	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3ec      	bcc.n	800278a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027b0:	883b      	ldrh	r3, [r7, #0]
 80027b2:	0418      	lsls	r0, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	4302      	orrs	r2, r0
 80027c0:	3340      	adds	r3, #64	; 0x40
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_PCDEx_ActivateLPM+0x44>)
 8002828:	4313      	orrs	r3, r2
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	10000003 	.word	0x10000003

08002840 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40007000 	.word	0x40007000

08002860 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800288e:	f7fe fb15 	bl	8000ebc <HAL_GetTick>
 8002892:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002894:	e009      	b.n	80028aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002896:	f7fe fb11 	bl	8000ebc <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a4:	d901      	bls.n	80028aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e022      	b.n	80028f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028aa:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b6:	d1ee      	bne.n	8002896 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c4:	f7fe fafa 	bl	8000ebc <HAL_GetTick>
 80028c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028ca:	e009      	b.n	80028e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028cc:	f7fe faf6 	bl	8000ebc <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028da:	d901      	bls.n	80028e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e007      	b.n	80028f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ec:	d1ee      	bne.n	80028cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40007000 	.word	0x40007000

08002900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e29b      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8087 	beq.w	8002a32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002924:	4b96      	ldr	r3, [pc, #600]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b04      	cmp	r3, #4
 800292e:	d00c      	beq.n	800294a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002930:	4b93      	ldr	r3, [pc, #588]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d112      	bne.n	8002962 <HAL_RCC_OscConfig+0x62>
 800293c:	4b90      	ldr	r3, [pc, #576]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002948:	d10b      	bne.n	8002962 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294a:	4b8d      	ldr	r3, [pc, #564]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d06c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x130>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d168      	bne.n	8002a30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e275      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x7a>
 800296c:	4b84      	ldr	r3, [pc, #528]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a83      	ldr	r2, [pc, #524]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	e02e      	b.n	80029d8 <HAL_RCC_OscConfig+0xd8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x9c>
 8002982:	4b7f      	ldr	r3, [pc, #508]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7e      	ldr	r2, [pc, #504]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b7c      	ldr	r3, [pc, #496]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7b      	ldr	r2, [pc, #492]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e01d      	b.n	80029d8 <HAL_RCC_OscConfig+0xd8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0xc0>
 80029a6:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a75      	ldr	r2, [pc, #468]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a72      	ldr	r2, [pc, #456]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0xd8>
 80029c0:	4b6f      	ldr	r3, [pc, #444]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6e      	ldr	r2, [pc, #440]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6b      	ldr	r2, [pc, #428]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fa6c 	bl	8000ebc <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fa68 	bl	8000ebc <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e229      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe8>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fa58 	bl	8000ebc <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fa54 	bl	8000ebc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e215      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	4b57      	ldr	r3, [pc, #348]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x110>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d069      	beq.n	8002b12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3e:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b4d      	ldr	r3, [pc, #308]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d11c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x190>
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_RCC_OscConfig+0x17a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e1e9      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	493d      	ldr	r1, [pc, #244]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	e040      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d023      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a38      	ldr	r2, [pc, #224]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fa0a 	bl	8000ebc <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aac:	f7fe fa06 	bl	8000ebc <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1c7      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4929      	ldr	r1, [pc, #164]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
 8002ade:	e018      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f9e6 	bl	8000ebc <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe f9e2 	bl	8000ebc <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1a3      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d038      	beq.n	8002b90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7fe f9c3 	bl	8000ebc <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3a:	f7fe f9bf 	bl	8000ebc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e180      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x23a>
 8002b58:	e01a      	b.n	8002b90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_RCC_OscConfig+0x280>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe f9a9 	bl	8000ebc <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe f9a5 	bl	8000ebc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d903      	bls.n	8002b84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e166      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
 8002b80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a4 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b8c      	ldr	r3, [pc, #560]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b89      	ldr	r3, [pc, #548]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a88      	ldr	r2, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b86      	ldr	r3, [pc, #536]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc6:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <HAL_RCC_OscConfig+0x4d4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d118      	bne.n	8002c04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bd2:	4b80      	ldr	r3, [pc, #512]	; (8002dd4 <HAL_RCC_OscConfig+0x4d4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7f      	ldr	r2, [pc, #508]	; (8002dd4 <HAL_RCC_OscConfig+0x4d4>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bde:	f7fe f96d 	bl	8000ebc <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be6:	f7fe f969 	bl	8000ebc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	; 0x64
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e12a      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x4d4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x31a>
 8002c0c:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a6f      	ldr	r2, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
 8002c18:	e02d      	b.n	8002c76 <HAL_RCC_OscConfig+0x376>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x33c>
 8002c22:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a6a      	ldr	r2, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a67      	ldr	r2, [pc, #412]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3a:	e01c      	b.n	8002c76 <HAL_RCC_OscConfig+0x376>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x35e>
 8002c44:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a61      	ldr	r2, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a5e      	ldr	r2, [pc, #376]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	e00b      	b.n	8002c76 <HAL_RCC_OscConfig+0x376>
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a58      	ldr	r2, [pc, #352]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d015      	beq.n	8002caa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f91d 	bl	8000ebc <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe f919 	bl	8000ebc <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0d8      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ee      	beq.n	8002c86 <HAL_RCC_OscConfig+0x386>
 8002ca8:	e014      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7fe f907 	bl	8000ebc <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7fe f903 	bl	8000ebc <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0c2      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc8:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ee      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80ae 	beq.w	8002e4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf0:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d06d      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d14b      	bne.n	8002d9c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe f8d4 	bl	8000ebc <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe f8d0 	bl	8000ebc <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e091      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	019b      	lsls	r3, r3, #6
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	071b      	lsls	r3, r3, #28
 8002d62:	491b      	ldr	r1, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe f8a2 	bl	8000ebc <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe f89e 	bl	8000ebc <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e05f      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x47c>
 8002d9a:	e057      	b.n	8002e4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe f888 	bl	8000ebc <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe f884 	bl	8000ebc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e045      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4b0>
 8002dce:	e03d      	b.n	8002e4c <HAL_RCC_OscConfig+0x54c>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_RCC_OscConfig+0x558>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d030      	beq.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d129      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d122      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d119      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d10f      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d0      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 020f 	bic.w	r2, r3, #15
 8002e8a:	4965      	ldr	r1, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d040      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e073      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06b      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4936      	ldr	r1, [pc, #216]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fd ffb4 	bl	8000ebc <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fd ffb0 	bl	8000ebc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e053      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d210      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 020f 	bic.w	r2, r3, #15
 8002f96:	4922      	ldr	r1, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1cc>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	fa21 f303 	lsr.w	r3, r1, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1d0>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1d4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd ff10 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	08007ef4 	.word	0x08007ef4
 800302c:	20000400 	.word	0x20000400
 8003030:	20000404 	.word	0x20000404

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d007      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x32>
 8003056:	2b08      	cmp	r3, #8
 8003058:	d008      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x38>
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 80b4 	bne.w	80031c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b5e      	ldr	r3, [pc, #376]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003062:	60bb      	str	r3, [r7, #8]
      break;
 8003064:	e0b3      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003066:	4b5e      	ldr	r3, [pc, #376]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003068:	60bb      	str	r3, [r7, #8]
      break;
 800306a:	e0b0      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003076:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04a      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	f04f 0400 	mov.w	r4, #0
 800308c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	ea03 0501 	and.w	r5, r3, r1
 8003098:	ea04 0602 	and.w	r6, r4, r2
 800309c:	4629      	mov	r1, r5
 800309e:	4632      	mov	r2, r6
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	f04f 0400 	mov.w	r4, #0
 80030a8:	0154      	lsls	r4, r2, #5
 80030aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ae:	014b      	lsls	r3, r1, #5
 80030b0:	4619      	mov	r1, r3
 80030b2:	4622      	mov	r2, r4
 80030b4:	1b49      	subs	r1, r1, r5
 80030b6:	eb62 0206 	sbc.w	r2, r2, r6
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	f04f 0400 	mov.w	r4, #0
 80030c2:	0194      	lsls	r4, r2, #6
 80030c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030c8:	018b      	lsls	r3, r1, #6
 80030ca:	1a5b      	subs	r3, r3, r1
 80030cc:	eb64 0402 	sbc.w	r4, r4, r2
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	00e2      	lsls	r2, r4, #3
 80030da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030de:	00d9      	lsls	r1, r3, #3
 80030e0:	460b      	mov	r3, r1
 80030e2:	4614      	mov	r4, r2
 80030e4:	195b      	adds	r3, r3, r5
 80030e6:	eb44 0406 	adc.w	r4, r4, r6
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	0262      	lsls	r2, r4, #9
 80030f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030f8:	0259      	lsls	r1, r3, #9
 80030fa:	460b      	mov	r3, r1
 80030fc:	4614      	mov	r4, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	4621      	mov	r1, r4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f04f 0400 	mov.w	r4, #0
 8003108:	461a      	mov	r2, r3
 800310a:	4623      	mov	r3, r4
 800310c:	f7fd f894 	bl	8000238 <__aeabi_uldivmod>
 8003110:	4603      	mov	r3, r0
 8003112:	460c      	mov	r4, r1
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e049      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003118:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	f04f 0400 	mov.w	r4, #0
 8003122:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	ea03 0501 	and.w	r5, r3, r1
 800312e:	ea04 0602 	and.w	r6, r4, r2
 8003132:	4629      	mov	r1, r5
 8003134:	4632      	mov	r2, r6
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f04f 0400 	mov.w	r4, #0
 800313e:	0154      	lsls	r4, r2, #5
 8003140:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003144:	014b      	lsls	r3, r1, #5
 8003146:	4619      	mov	r1, r3
 8003148:	4622      	mov	r2, r4
 800314a:	1b49      	subs	r1, r1, r5
 800314c:	eb62 0206 	sbc.w	r2, r2, r6
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	f04f 0400 	mov.w	r4, #0
 8003158:	0194      	lsls	r4, r2, #6
 800315a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800315e:	018b      	lsls	r3, r1, #6
 8003160:	1a5b      	subs	r3, r3, r1
 8003162:	eb64 0402 	sbc.w	r4, r4, r2
 8003166:	f04f 0100 	mov.w	r1, #0
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	00e2      	lsls	r2, r4, #3
 8003170:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003174:	00d9      	lsls	r1, r3, #3
 8003176:	460b      	mov	r3, r1
 8003178:	4614      	mov	r4, r2
 800317a:	195b      	adds	r3, r3, r5
 800317c:	eb44 0406 	adc.w	r4, r4, r6
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	02a2      	lsls	r2, r4, #10
 800318a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800318e:	0299      	lsls	r1, r3, #10
 8003190:	460b      	mov	r3, r1
 8003192:	4614      	mov	r4, r2
 8003194:	4618      	mov	r0, r3
 8003196:	4621      	mov	r1, r4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f04f 0400 	mov.w	r4, #0
 800319e:	461a      	mov	r2, r3
 80031a0:	4623      	mov	r3, r4
 80031a2:	f7fd f849 	bl	8000238 <__aeabi_uldivmod>
 80031a6:	4603      	mov	r3, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031ca:	60bb      	str	r3, [r7, #8]
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	68bb      	ldr	r3, [r7, #8]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000400 	.word	0x20000400

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4601      	mov	r1, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4a03      	ldr	r2, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	08007f04 	.word	0x08007f04

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003228:	f7ff ffdc 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800322c:	4601      	mov	r1, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	08007f04 	.word	0x08007f04

0800324c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003274:	4b69      	ldr	r3, [pc, #420]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a68      	ldr	r2, [pc, #416]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800327e:	6093      	str	r3, [r2, #8]
 8003280:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	4964      	ldr	r1, [pc, #400]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003296:	2301      	movs	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d017      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a6:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	4959      	ldr	r1, [pc, #356]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c4:	d101      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032e2:	4b4e      	ldr	r3, [pc, #312]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	494a      	ldr	r1, [pc, #296]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003300:	d101      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003302:	2301      	movs	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800330e:	2301      	movs	r3, #1
 8003310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 808b 	beq.w	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	4a39      	ldr	r2, [pc, #228]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	6413      	str	r3, [r2, #64]	; 0x40
 800333c:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003348:	4b35      	ldr	r3, [pc, #212]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a34      	ldr	r2, [pc, #208]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800334e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003354:	f7fd fdb2 	bl	8000ebc <HAL_GetTick>
 8003358:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fd fdae 	bl	8000ebc <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e38d      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800336e:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003382:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d035      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	429a      	cmp	r2, r3
 8003396:	d02e      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003398:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033ba:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033c0:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d114      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd fd76 	bl	8000ebc <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	e00a      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fd fd72 	bl	8000ebc <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e34f      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ee      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003402:	d111      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003412:	400b      	ands	r3, r1
 8003414:	4901      	ldr	r1, [pc, #4]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
 800341a:	e00b      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
 8003424:	0ffffcff 	.word	0x0ffffcff
 8003428:	4bb3      	ldr	r3, [pc, #716]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4ab2      	ldr	r2, [pc, #712]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003432:	6093      	str	r3, [r2, #8]
 8003434:	4bb0      	ldr	r3, [pc, #704]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003436:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	49ad      	ldr	r1, [pc, #692]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003442:	4313      	orrs	r3, r2
 8003444:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d010      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003452:	4ba9      	ldr	r3, [pc, #676]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003458:	4aa7      	ldr	r2, [pc, #668]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003462:	4ba5      	ldr	r3, [pc, #660]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003464:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	49a2      	ldr	r1, [pc, #648]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003480:	4b9d      	ldr	r3, [pc, #628]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348e:	499a      	ldr	r1, [pc, #616]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a2:	4b95      	ldr	r3, [pc, #596]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b0:	4991      	ldr	r1, [pc, #580]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c4:	4b8c      	ldr	r3, [pc, #560]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d2:	4989      	ldr	r1, [pc, #548]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034e6:	4b84      	ldr	r3, [pc, #528]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4980      	ldr	r1, [pc, #512]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003508:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f023 0203 	bic.w	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4978      	ldr	r1, [pc, #480]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800352a:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003530:	f023 020c 	bic.w	r2, r3, #12
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	496f      	ldr	r1, [pc, #444]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	4967      	ldr	r1, [pc, #412]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800356e:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	495e      	ldr	r1, [pc, #376]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003590:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	4956      	ldr	r1, [pc, #344]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035b2:	4b51      	ldr	r3, [pc, #324]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	494d      	ldr	r1, [pc, #308]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035d4:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	4945      	ldr	r1, [pc, #276]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003604:	493c      	ldr	r1, [pc, #240]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003618:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003626:	4934      	ldr	r1, [pc, #208]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d011      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800363a:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003648:	492b      	ldr	r1, [pc, #172]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003658:	d101      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800365a:	2301      	movs	r3, #1
 800365c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800366a:	2301      	movs	r3, #1
 800366c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003688:	491b      	ldr	r1, [pc, #108]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ac:	4912      	ldr	r1, [pc, #72]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d0:	4909      	ldr	r1, [pc, #36]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00f      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	4985      	ldr	r1, [pc, #532]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003710:	4b80      	ldr	r3, [pc, #512]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003716:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003720:	497c      	ldr	r1, [pc, #496]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d005      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003736:	f040 80d6 	bne.w	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800373a:	4b76      	ldr	r3, [pc, #472]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a75      	ldr	r2, [pc, #468]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003740:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003746:	f7fd fbb9 	bl	8000ebc <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800374e:	f7fd fbb5 	bl	8000ebc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b64      	cmp	r3, #100	; 0x64
 800375a:	d901      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e194      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003760:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d021      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11d      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003780:	4b64      	ldr	r3, [pc, #400]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800378e:	4b61      	ldr	r3, [pc, #388]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003794:	0e1b      	lsrs	r3, r3, #24
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	019a      	lsls	r2, r3, #6
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	071b      	lsls	r3, r3, #28
 80037b4:	4957      	ldr	r1, [pc, #348]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d02e      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e6:	d129      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037e8:	4b4a      	ldr	r3, [pc, #296]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ee:	0c1b      	lsrs	r3, r3, #16
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fc:	0f1b      	lsrs	r3, r3, #28
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	019a      	lsls	r2, r3, #6
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	431a      	orrs	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	071b      	lsls	r3, r3, #28
 800381c:	493d      	ldr	r1, [pc, #244]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003824:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382a:	f023 021f 	bic.w	r2, r3, #31
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	3b01      	subs	r3, #1
 8003834:	4937      	ldr	r1, [pc, #220]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01d      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003848:	4b32      	ldr	r3, [pc, #200]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384e:	0e1b      	lsrs	r3, r3, #24
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003856:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385c:	0f1b      	lsrs	r3, r3, #28
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	019a      	lsls	r2, r3, #6
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	431a      	orrs	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	431a      	orrs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	071b      	lsls	r3, r3, #28
 800387c:	4925      	ldr	r1, [pc, #148]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d011      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	019a      	lsls	r2, r3, #6
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	061b      	lsls	r3, r3, #24
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	071b      	lsls	r3, r3, #28
 80038ac:	4919      	ldr	r1, [pc, #100]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c0:	f7fd fafc 	bl	8000ebc <HAL_GetTick>
 80038c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038c8:	f7fd faf8 	bl	8000ebc <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e0d7      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038da:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 80cd 	bne.w	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a08      	ldr	r2, [pc, #32]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fa:	f7fd fadf 	bl	8000ebc <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003900:	e00a      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003902:	f7fd fadb 	bl	8000ebc <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	; 0x64
 800390e:	d903      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0ba      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003914:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003918:	4b5e      	ldr	r3, [pc, #376]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003924:	d0ed      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02e      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d12a      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800394e:	4b51      	ldr	r3, [pc, #324]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800395c:	4b4d      	ldr	r3, [pc, #308]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	019a      	lsls	r2, r3, #6
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	071b      	lsls	r3, r3, #28
 8003982:	4944      	ldr	r1, [pc, #272]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800398a:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	493d      	ldr	r1, [pc, #244]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d022      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b8:	d11d      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039ba:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	0e1b      	lsrs	r3, r3, #24
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039c8:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	0f1b      	lsrs	r3, r3, #28
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	019a      	lsls	r2, r3, #6
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	431a      	orrs	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	061b      	lsls	r3, r3, #24
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	071b      	lsls	r3, r3, #28
 80039ee:	4929      	ldr	r1, [pc, #164]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d028      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a02:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	0e1b      	lsrs	r3, r3, #24
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a10:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	019a      	lsls	r2, r3, #6
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	071b      	lsls	r3, r3, #28
 8003a36:	4917      	ldr	r1, [pc, #92]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4911      	ldr	r1, [pc, #68]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd fa2c 	bl	8000ebc <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a68:	f7fd fa28 	bl	8000ebc <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e007      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a86:	d1ef      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e040      	b.n	8003b2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd f8c6 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f82c 	bl	8003b34 <UART_SetConfig>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e022      	b.n	8003b2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 faca 	bl	8004088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fb51 	bl	80041cc <UART_CheckIdleState>
 8003b2a:	4603      	mov	r3, r0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4bb1      	ldr	r3, [pc, #708]	; (8003e28 <UART_SetConfig+0x2f4>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6939      	ldr	r1, [r7, #16]
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a9f      	ldr	r2, [pc, #636]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d121      	bne.n	8003bf8 <UART_SetConfig+0xc4>
 8003bb4:	4b9e      	ldr	r3, [pc, #632]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d816      	bhi.n	8003bf0 <UART_SetConfig+0xbc>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x94>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003be5 	.word	0x08003be5
 8003bd0:	08003bdf 	.word	0x08003bdf
 8003bd4:	08003beb 	.word	0x08003beb
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e151      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e14e      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003be4:	2304      	movs	r3, #4
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e14b      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003bea:	2308      	movs	r3, #8
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e148      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	bf00      	nop
 8003bf6:	e144      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a8d      	ldr	r2, [pc, #564]	; (8003e34 <UART_SetConfig+0x300>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d134      	bne.n	8003c6c <UART_SetConfig+0x138>
 8003c02:	4b8b      	ldr	r3, [pc, #556]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	d829      	bhi.n	8003c64 <UART_SetConfig+0x130>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0xe4>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	08003c65 	.word	0x08003c65
 8003c20:	08003c65 	.word	0x08003c65
 8003c24:	08003c65 	.word	0x08003c65
 8003c28:	08003c59 	.word	0x08003c59
 8003c2c:	08003c65 	.word	0x08003c65
 8003c30:	08003c65 	.word	0x08003c65
 8003c34:	08003c65 	.word	0x08003c65
 8003c38:	08003c53 	.word	0x08003c53
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c65 	.word	0x08003c65
 8003c48:	08003c5f 	.word	0x08003c5f
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e117      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003c52:	2302      	movs	r3, #2
 8003c54:	77fb      	strb	r3, [r7, #31]
 8003c56:	e114      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e111      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003c5e:	2308      	movs	r3, #8
 8003c60:	77fb      	strb	r3, [r7, #31]
 8003c62:	e10e      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003c64:	2310      	movs	r3, #16
 8003c66:	77fb      	strb	r3, [r7, #31]
 8003c68:	bf00      	nop
 8003c6a:	e10a      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a71      	ldr	r2, [pc, #452]	; (8003e38 <UART_SetConfig+0x304>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d120      	bne.n	8003cb8 <UART_SetConfig+0x184>
 8003c76:	4b6e      	ldr	r3, [pc, #440]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d00f      	beq.n	8003ca4 <UART_SetConfig+0x170>
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d802      	bhi.n	8003c8e <UART_SetConfig+0x15a>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <UART_SetConfig+0x164>
 8003c8c:	e010      	b.n	8003cb0 <UART_SetConfig+0x17c>
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d005      	beq.n	8003c9e <UART_SetConfig+0x16a>
 8003c92:	2b30      	cmp	r3, #48	; 0x30
 8003c94:	d009      	beq.n	8003caa <UART_SetConfig+0x176>
 8003c96:	e00b      	b.n	8003cb0 <UART_SetConfig+0x17c>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e0f1      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e0ee      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e0eb      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003caa:	2308      	movs	r3, #8
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e0e8      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	bf00      	nop
 8003cb6:	e0e4      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a5f      	ldr	r2, [pc, #380]	; (8003e3c <UART_SetConfig+0x308>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d120      	bne.n	8003d04 <UART_SetConfig+0x1d0>
 8003cc2:	4b5b      	ldr	r3, [pc, #364]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d00f      	beq.n	8003cf0 <UART_SetConfig+0x1bc>
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d802      	bhi.n	8003cda <UART_SetConfig+0x1a6>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <UART_SetConfig+0x1b0>
 8003cd8:	e010      	b.n	8003cfc <UART_SetConfig+0x1c8>
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d005      	beq.n	8003cea <UART_SetConfig+0x1b6>
 8003cde:	2bc0      	cmp	r3, #192	; 0xc0
 8003ce0:	d009      	beq.n	8003cf6 <UART_SetConfig+0x1c2>
 8003ce2:	e00b      	b.n	8003cfc <UART_SetConfig+0x1c8>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e0cb      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e0c8      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e0c5      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e0c2      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	bf00      	nop
 8003d02:	e0be      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a4d      	ldr	r2, [pc, #308]	; (8003e40 <UART_SetConfig+0x30c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d124      	bne.n	8003d58 <UART_SetConfig+0x224>
 8003d0e:	4b48      	ldr	r3, [pc, #288]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1c:	d012      	beq.n	8003d44 <UART_SetConfig+0x210>
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d802      	bhi.n	8003d2a <UART_SetConfig+0x1f6>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <UART_SetConfig+0x204>
 8003d28:	e012      	b.n	8003d50 <UART_SetConfig+0x21c>
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2e:	d006      	beq.n	8003d3e <UART_SetConfig+0x20a>
 8003d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d34:	d009      	beq.n	8003d4a <UART_SetConfig+0x216>
 8003d36:	e00b      	b.n	8003d50 <UART_SetConfig+0x21c>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e0a1      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e09e      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d44:	2304      	movs	r3, #4
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e09b      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e098      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d50:	2310      	movs	r3, #16
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	bf00      	nop
 8003d56:	e094      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a39      	ldr	r2, [pc, #228]	; (8003e44 <UART_SetConfig+0x310>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d124      	bne.n	8003dac <UART_SetConfig+0x278>
 8003d62:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d70:	d012      	beq.n	8003d98 <UART_SetConfig+0x264>
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d76:	d802      	bhi.n	8003d7e <UART_SetConfig+0x24a>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <UART_SetConfig+0x258>
 8003d7c:	e012      	b.n	8003da4 <UART_SetConfig+0x270>
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d82:	d006      	beq.n	8003d92 <UART_SetConfig+0x25e>
 8003d84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d88:	d009      	beq.n	8003d9e <UART_SetConfig+0x26a>
 8003d8a:	e00b      	b.n	8003da4 <UART_SetConfig+0x270>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e077      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d92:	2302      	movs	r3, #2
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e074      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e071      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e06e      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003da4:	2310      	movs	r3, #16
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	bf00      	nop
 8003daa:	e06a      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <UART_SetConfig+0x314>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d124      	bne.n	8003e00 <UART_SetConfig+0x2cc>
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d012      	beq.n	8003dec <UART_SetConfig+0x2b8>
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	d802      	bhi.n	8003dd2 <UART_SetConfig+0x29e>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <UART_SetConfig+0x2ac>
 8003dd0:	e012      	b.n	8003df8 <UART_SetConfig+0x2c4>
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd6:	d006      	beq.n	8003de6 <UART_SetConfig+0x2b2>
 8003dd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ddc:	d009      	beq.n	8003df2 <UART_SetConfig+0x2be>
 8003dde:	e00b      	b.n	8003df8 <UART_SetConfig+0x2c4>
 8003de0:	2300      	movs	r3, #0
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e04d      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e04a      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003dec:	2304      	movs	r3, #4
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e047      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003df2:	2308      	movs	r3, #8
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e044      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	bf00      	nop
 8003dfe:	e040      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <UART_SetConfig+0x318>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d139      	bne.n	8003e7e <UART_SetConfig+0x34a>
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e18:	d027      	beq.n	8003e6a <UART_SetConfig+0x336>
 8003e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1e:	d817      	bhi.n	8003e50 <UART_SetConfig+0x31c>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01c      	beq.n	8003e5e <UART_SetConfig+0x32a>
 8003e24:	e027      	b.n	8003e76 <UART_SetConfig+0x342>
 8003e26:	bf00      	nop
 8003e28:	efff69f3 	.word	0xefff69f3
 8003e2c:	40011000 	.word	0x40011000
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40004400 	.word	0x40004400
 8003e38:	40004800 	.word	0x40004800
 8003e3c:	40004c00 	.word	0x40004c00
 8003e40:	40005000 	.word	0x40005000
 8003e44:	40011400 	.word	0x40011400
 8003e48:	40007800 	.word	0x40007800
 8003e4c:	40007c00 	.word	0x40007c00
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d006      	beq.n	8003e64 <UART_SetConfig+0x330>
 8003e56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e5a:	d009      	beq.n	8003e70 <UART_SetConfig+0x33c>
 8003e5c:	e00b      	b.n	8003e76 <UART_SetConfig+0x342>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e00e      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003e64:	2302      	movs	r3, #2
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e00b      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e008      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003e70:	2308      	movs	r3, #8
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e005      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003e76:	2310      	movs	r3, #16
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	bf00      	nop
 8003e7c:	e001      	b.n	8003e82 <UART_SetConfig+0x34e>
 8003e7e:	2310      	movs	r3, #16
 8003e80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8a:	d17f      	bne.n	8003f8c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003e8c:	7ffb      	ldrb	r3, [r7, #31]
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d85c      	bhi.n	8003f4c <UART_SetConfig+0x418>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0x364>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003edd 	.word	0x08003edd
 8003ea0:	08003efd 	.word	0x08003efd
 8003ea4:	08003f4d 	.word	0x08003f4d
 8003ea8:	08003f15 	.word	0x08003f15
 8003eac:	08003f4d 	.word	0x08003f4d
 8003eb0:	08003f4d 	.word	0x08003f4d
 8003eb4:	08003f4d 	.word	0x08003f4d
 8003eb8:	08003f35 	.word	0x08003f35
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7ff f99e 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003ec0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	005a      	lsls	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	441a      	add	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	61bb      	str	r3, [r7, #24]
        break;
 8003eda:	e03a      	b.n	8003f52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003edc:	f7ff f9a2 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8003ee0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	005a      	lsls	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	441a      	add	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	61bb      	str	r3, [r7, #24]
        break;
 8003efa:	e02a      	b.n	8003f52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	085a      	lsrs	r2, r3, #1
 8003f02:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <UART_SetConfig+0x54c>)
 8003f04:	4413      	add	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6852      	ldr	r2, [r2, #4]
 8003f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	61bb      	str	r3, [r7, #24]
        break;
 8003f12:	e01e      	b.n	8003f52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f14:	f7ff f88e 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8003f18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	005a      	lsls	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	441a      	add	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	61bb      	str	r3, [r7, #24]
        break;
 8003f32:	e00e      	b.n	8003f52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	61bb      	str	r3, [r7, #24]
        break;
 8003f4a:	e002      	b.n	8003f52 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
        break;
 8003f50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d916      	bls.n	8003f86 <UART_SetConfig+0x452>
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5e:	d212      	bcs.n	8003f86 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f023 030f 	bic.w	r3, r3, #15
 8003f68:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	897b      	ldrh	r3, [r7, #10]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	897a      	ldrh	r2, [r7, #10]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e070      	b.n	8004068 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
 8003f8a:	e06d      	b.n	8004068 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003f8c:	7ffb      	ldrb	r3, [r7, #31]
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d859      	bhi.n	8004046 <UART_SetConfig+0x512>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x464>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fdb 	.word	0x08003fdb
 8003fa0:	08003ff9 	.word	0x08003ff9
 8003fa4:	08004047 	.word	0x08004047
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08004047 	.word	0x08004047
 8003fb0:	08004047 	.word	0x08004047
 8003fb4:	08004047 	.word	0x08004047
 8003fb8:	0800402f 	.word	0x0800402f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7ff f91e 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003fc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	085a      	lsrs	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	441a      	add	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	61bb      	str	r3, [r7, #24]
        break;
 8003fd8:	e038      	b.n	800404c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fda:	f7ff f923 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8003fde:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	085a      	lsrs	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	441a      	add	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	61bb      	str	r3, [r7, #24]
        break;
 8003ff6:	e029      	b.n	800404c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	085a      	lsrs	r2, r3, #1
 8003ffe:	4b21      	ldr	r3, [pc, #132]	; (8004084 <UART_SetConfig+0x550>)
 8004000:	4413      	add	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6852      	ldr	r2, [r2, #4]
 8004006:	fbb3 f3f2 	udiv	r3, r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	61bb      	str	r3, [r7, #24]
        break;
 800400e:	e01d      	b.n	800404c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004010:	f7ff f810 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8004014:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	085a      	lsrs	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	441a      	add	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	b29b      	uxth	r3, r3
 800402a:	61bb      	str	r3, [r7, #24]
        break;
 800402c:	e00e      	b.n	800404c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	b29b      	uxth	r3, r3
 8004042:	61bb      	str	r3, [r7, #24]
        break;
 8004044:	e002      	b.n	800404c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
        break;
 800404a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	d908      	bls.n	8004064 <UART_SetConfig+0x530>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d204      	bcs.n	8004064 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	e001      	b.n	8004068 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004074:	7dfb      	ldrb	r3, [r7, #23]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	01e84800 	.word	0x01e84800
 8004084:	00f42400 	.word	0x00f42400

08004088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01a      	beq.n	800419e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004186:	d10a      	bne.n	800419e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80041da:	f7fc fe6f 	bl	8000ebc <HAL_GetTick>
 80041de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d10e      	bne.n	800420c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f82a 	bl	8004256 <UART_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e020      	b.n	800424e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d10e      	bne.n	8004238 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f814 	bl	8004256 <UART_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e00a      	b.n	800424e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004266:	e05d      	b.n	8004324 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d059      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004270:	f7fc fe24 	bl	8000ebc <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <UART_WaitOnFlagUntilTimeout+0x30>
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11b      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004294:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e042      	b.n	8004344 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d02b      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042da:	d123      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e00f      	b.n	8004344 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	429a      	cmp	r2, r3
 8004340:	d092      	beq.n	8004268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800434c:	b084      	sub	sp, #16
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	f107 001c 	add.w	r0, r7, #28
 800435a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d120      	bne.n	80043a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <USB_CoreInit+0xac>)
 8004376:	4013      	ands	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 fac4 	bl	8005928 <USB_CoreReset>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e010      	b.n	80043c8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f001 fab8 	bl	8005928 <USB_CoreReset>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d10b      	bne.n	80043e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f043 0206 	orr.w	r2, r3, #6
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f2:	b004      	add	sp, #16
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	ffbdffbf 	.word	0xffbdffbf

080043fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d165      	bne.n	80044dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4a41      	ldr	r2, [pc, #260]	; (8004518 <USB_SetTurnaroundTime+0x11c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d906      	bls.n	8004426 <USB_SetTurnaroundTime+0x2a>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4a40      	ldr	r2, [pc, #256]	; (800451c <USB_SetTurnaroundTime+0x120>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d802      	bhi.n	8004426 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004420:	230f      	movs	r3, #15
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e062      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4a3c      	ldr	r2, [pc, #240]	; (800451c <USB_SetTurnaroundTime+0x120>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d906      	bls.n	800443c <USB_SetTurnaroundTime+0x40>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4a3b      	ldr	r2, [pc, #236]	; (8004520 <USB_SetTurnaroundTime+0x124>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d802      	bhi.n	800443c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004436:	230e      	movs	r3, #14
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e057      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a38      	ldr	r2, [pc, #224]	; (8004520 <USB_SetTurnaroundTime+0x124>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d906      	bls.n	8004452 <USB_SetTurnaroundTime+0x56>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4a37      	ldr	r2, [pc, #220]	; (8004524 <USB_SetTurnaroundTime+0x128>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d802      	bhi.n	8004452 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800444c:	230d      	movs	r3, #13
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e04c      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4a33      	ldr	r2, [pc, #204]	; (8004524 <USB_SetTurnaroundTime+0x128>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d906      	bls.n	8004468 <USB_SetTurnaroundTime+0x6c>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4a32      	ldr	r2, [pc, #200]	; (8004528 <USB_SetTurnaroundTime+0x12c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d802      	bhi.n	8004468 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004462:	230c      	movs	r3, #12
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e041      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <USB_SetTurnaroundTime+0x12c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d906      	bls.n	800447e <USB_SetTurnaroundTime+0x82>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a2e      	ldr	r2, [pc, #184]	; (800452c <USB_SetTurnaroundTime+0x130>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d802      	bhi.n	800447e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004478:	230b      	movs	r3, #11
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e036      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4a2a      	ldr	r2, [pc, #168]	; (800452c <USB_SetTurnaroundTime+0x130>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d906      	bls.n	8004494 <USB_SetTurnaroundTime+0x98>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4a29      	ldr	r2, [pc, #164]	; (8004530 <USB_SetTurnaroundTime+0x134>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d802      	bhi.n	8004494 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800448e:	230a      	movs	r3, #10
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	e02b      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a26      	ldr	r2, [pc, #152]	; (8004530 <USB_SetTurnaroundTime+0x134>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d906      	bls.n	80044aa <USB_SetTurnaroundTime+0xae>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4a25      	ldr	r2, [pc, #148]	; (8004534 <USB_SetTurnaroundTime+0x138>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d802      	bhi.n	80044aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044a4:	2309      	movs	r3, #9
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e020      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4a21      	ldr	r2, [pc, #132]	; (8004534 <USB_SetTurnaroundTime+0x138>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d906      	bls.n	80044c0 <USB_SetTurnaroundTime+0xc4>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4a20      	ldr	r2, [pc, #128]	; (8004538 <USB_SetTurnaroundTime+0x13c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d802      	bhi.n	80044c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ba:	2308      	movs	r3, #8
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e015      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <USB_SetTurnaroundTime+0x13c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d906      	bls.n	80044d6 <USB_SetTurnaroundTime+0xda>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <USB_SetTurnaroundTime+0x140>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d802      	bhi.n	80044d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044d0:	2307      	movs	r3, #7
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e00a      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044d6:	2306      	movs	r3, #6
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e007      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044e2:	2309      	movs	r3, #9
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e001      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044e8:	2309      	movs	r3, #9
 80044ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	00d8acbf 	.word	0x00d8acbf
 800451c:	00e4e1bf 	.word	0x00e4e1bf
 8004520:	00f423ff 	.word	0x00f423ff
 8004524:	0106737f 	.word	0x0106737f
 8004528:	011a499f 	.word	0x011a499f
 800452c:	01312cff 	.word	0x01312cff
 8004530:	014ca43f 	.word	0x014ca43f
 8004534:	016e35ff 	.word	0x016e35ff
 8004538:	01a6ab1f 	.word	0x01a6ab1f
 800453c:	01e847ff 	.word	0x01e847ff

08004540 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f043 0201 	orr.w	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 0201 	bic.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d106      	bne.n	80045b0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	e00b      	b.n	80045c8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	e001      	b.n	80045c8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e003      	b.n	80045d0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045c8:	2032      	movs	r0, #50	; 0x32
 80045ca:	f7fc fc83 	bl	8000ed4 <HAL_Delay>

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045d8:	b084      	sub	sp, #16
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	e009      	b.n	800460c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3340      	adds	r3, #64	; 0x40
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	2200      	movs	r2, #0
 8004604:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3301      	adds	r3, #1
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b0e      	cmp	r3, #14
 8004610:	d9f2      	bls.n	80045f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d11c      	bne.n	8004652 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	e005      	b.n	800465e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004664:	461a      	mov	r2, r3
 8004666:	2300      	movs	r3, #0
 8004668:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004670:	4619      	mov	r1, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	461a      	mov	r2, r3
 800467a:	680b      	ldr	r3, [r1, #0]
 800467c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2b01      	cmp	r3, #1
 8004682:	d10c      	bne.n	800469e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800468a:	2100      	movs	r1, #0
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f959 	bl	8004944 <USB_SetDevSpeed>
 8004692:	e018      	b.n	80046c6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004694:	2101      	movs	r1, #1
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f954 	bl	8004944 <USB_SetDevSpeed>
 800469c:	e013      	b.n	80046c6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d10c      	bne.n	80046be <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046aa:	2100      	movs	r1, #0
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f949 	bl	8004944 <USB_SetDevSpeed>
 80046b2:	e008      	b.n	80046c6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046b4:	2101      	movs	r1, #1
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f944 	bl	8004944 <USB_SetDevSpeed>
 80046bc:	e003      	b.n	80046c6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046be:	2103      	movs	r1, #3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f93f 	bl	8004944 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046c6:	2110      	movs	r1, #16
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f8f3 	bl	80048b4 <USB_FlushTxFifo>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f911 	bl	8004900 <USB_FlushRxFifo>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	461a      	mov	r2, r3
 80046fc:	2300      	movs	r3, #0
 80046fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e043      	b.n	800479a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004728:	d118      	bne.n	800475c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	461a      	mov	r2, r3
 800473e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e013      	b.n	800476e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004752:	461a      	mov	r2, r3
 8004754:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e008      	b.n	800476e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	461a      	mov	r2, r3
 800477c:	2300      	movs	r3, #0
 800477e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	461a      	mov	r2, r3
 800478e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3301      	adds	r3, #1
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d3b7      	bcc.n	8004712 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e043      	b.n	8004830 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047be:	d118      	bne.n	80047f2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d2:	461a      	mov	r2, r3
 80047d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e013      	b.n	8004804 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e008      	b.n	8004804 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	461a      	mov	r2, r3
 8004800:	2300      	movs	r3, #0
 8004802:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	461a      	mov	r2, r3
 8004812:	2300      	movs	r3, #0
 8004814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004828:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3301      	adds	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	429a      	cmp	r2, r3
 8004836:	d3b7      	bcc.n	80047a8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800484a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004858:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f043 0210 	orr.w	r2, r3, #16
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <USB_DevInit+0x2d4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f043 0208 	orr.w	r2, r3, #8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800488a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <USB_DevInit+0x2d8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048a8:	b004      	add	sp, #16
 80048aa:	4770      	bx	lr
 80048ac:	803c3800 	.word	0x803c3800
 80048b0:	40000004 	.word	0x40000004

080048b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	019b      	lsls	r3, r3, #6
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <USB_FlushTxFifo+0x48>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e006      	b.n	80048ee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d0f0      	beq.n	80048ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	00030d40 	.word	0x00030d40

08004900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2210      	movs	r2, #16
 8004910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a09      	ldr	r2, [pc, #36]	; (8004940 <USB_FlushRxFifo+0x40>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e006      	b.n	8004932 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b10      	cmp	r3, #16
 800492e:	d0f0      	beq.n	8004912 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	00030d40 	.word	0x00030d40

08004944 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004964:	4313      	orrs	r3, r2
 8004966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004976:	b480      	push	{r7}
 8004978:	b087      	sub	sp, #28
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0306 	and.w	r3, r3, #6
 800498e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
 800499a:	e00a      	b.n	80049b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d002      	beq.n	80049a8 <USB_GetDevSpeed+0x32>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d102      	bne.n	80049ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049a8:	2302      	movs	r3, #2
 80049aa:	75fb      	strb	r3, [r7, #23]
 80049ac:	e001      	b.n	80049b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049ae:	230f      	movs	r3, #15
 80049b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d139      	bne.n	8004a50 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d153      	bne.n	8004abc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	78db      	ldrb	r3, [r3, #3]
 8004a2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	059b      	lsls	r3, r3, #22
 8004a36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0159      	lsls	r1, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	440b      	add	r3, r1
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	4619      	mov	r1, r3
 8004a48:	4b20      	ldr	r3, [pc, #128]	; (8004acc <USB_ActivateEndpoint+0x10c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]
 8004a4e:	e035      	b.n	8004abc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d119      	bne.n	8004abc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	78db      	ldrb	r3, [r3, #3]
 8004aa2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	0159      	lsls	r1, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	440b      	add	r3, r1
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <USB_ActivateEndpoint+0x10c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	10008000 	.word	0x10008000

08004ad0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d161      	bne.n	8004bb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b02:	d11f      	bne.n	8004b44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	2101      	movs	r1, #1
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b64:	4013      	ands	r3, r2
 8004b66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	2101      	movs	r1, #1
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	0159      	lsls	r1, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	440b      	add	r3, r1
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4b35      	ldr	r3, [pc, #212]	; (8004c80 <USB_DeactivateEndpoint+0x1b0>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
 8004bae:	e060      	b.n	8004c72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc6:	d11f      	bne.n	8004c08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004be6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	43db      	mvns	r3, r3
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c28:	4013      	ands	r3, r2
 8004c2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	43db      	mvns	r3, r3
 8004c46:	68f9      	ldr	r1, [r7, #12]
 8004c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	0159      	lsls	r1, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	440b      	add	r3, r1
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <USB_DeactivateEndpoint+0x1b4>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	ec337800 	.word	0xec337800
 8004c84:	eff37800 	.word	0xeff37800

08004c88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	f040 8163 	bne.w	8004f70 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d132      	bne.n	8004d18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	0159      	lsls	r1, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	440b      	add	r3, r1
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4ba5      	ldr	r3, [pc, #660]	; (8004f64 <USB_EPStartXfer+0x2dc>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	0159      	lsls	r1, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	440b      	add	r3, r1
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4b95      	ldr	r3, [pc, #596]	; (8004f68 <USB_EPStartXfer+0x2e0>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	610b      	str	r3, [r1, #16]
 8004d16:	e074      	b.n	8004e02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	0159      	lsls	r1, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	440b      	add	r3, r1
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	4619      	mov	r1, r3
 8004d34:	4b8c      	ldr	r3, [pc, #560]	; (8004f68 <USB_EPStartXfer+0x2e0>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	0159      	lsls	r1, r3, #5
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	440b      	add	r3, r1
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	4619      	mov	r1, r3
 8004d56:	4b83      	ldr	r3, [pc, #524]	; (8004f64 <USB_EPStartXfer+0x2dc>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6959      	ldr	r1, [r3, #20]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	440b      	add	r3, r1
 8004d74:	1e59      	subs	r1, r3, #1
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d7e:	04d9      	lsls	r1, r3, #19
 8004d80:	4b7a      	ldr	r3, [pc, #488]	; (8004f6c <USB_EPStartXfer+0x2e4>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	0148      	lsls	r0, r1, #5
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	4401      	add	r1, r0
 8004d8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d90:	4313      	orrs	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	69b9      	ldr	r1, [r7, #24]
 8004dac:	0148      	lsls	r0, r1, #5
 8004dae:	69f9      	ldr	r1, [r7, #28]
 8004db0:	4401      	add	r1, r0
 8004db2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004db6:	4313      	orrs	r3, r2
 8004db8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	78db      	ldrb	r3, [r3, #3]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d11f      	bne.n	8004e02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ddc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004de0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d14b      	bne.n	8004ea0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	78db      	ldrb	r3, [r3, #3]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d128      	bne.n	8004e7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d110      	bne.n	8004e5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	e00f      	b.n	8004e7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e133      	b.n	8005108 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ebe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	78db      	ldrb	r3, [r3, #3]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d015      	beq.n	8004ef4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 811b 	beq.w	8005108 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	69f9      	ldr	r1, [r7, #28]
 8004eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	634b      	str	r3, [r1, #52]	; 0x34
 8004ef2:	e109      	b.n	8005108 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d110      	bne.n	8004f26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	e00f      	b.n	8004f46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	68d9      	ldr	r1, [r3, #12]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	781a      	ldrb	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	b298      	uxth	r0, r3
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	4603      	mov	r3, r0
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fa38 	bl	80053d0 <USB_WritePacket>
 8004f60:	e0d2      	b.n	8005108 <USB_EPStartXfer+0x480>
 8004f62:	bf00      	nop
 8004f64:	e007ffff 	.word	0xe007ffff
 8004f68:	fff80000 	.word	0xfff80000
 8004f6c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	0159      	lsls	r1, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	440b      	add	r3, r1
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4b61      	ldr	r3, [pc, #388]	; (8005114 <USB_EPStartXfer+0x48c>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	4619      	mov	r1, r3
 8004fae:	4b5a      	ldr	r3, [pc, #360]	; (8005118 <USB_EPStartXfer+0x490>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d123      	bne.n	8005004 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd2:	69b9      	ldr	r1, [r7, #24]
 8004fd4:	0148      	lsls	r0, r1, #5
 8004fd6:	69f9      	ldr	r1, [r7, #28]
 8004fd8:	4401      	add	r1, r0
 8004fda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005000:	6113      	str	r3, [r2, #16]
 8005002:	e033      	b.n	800506c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4413      	add	r3, r2
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	8afb      	ldrh	r3, [r7, #22]
 800502a:	04d9      	lsls	r1, r3, #19
 800502c:	4b3b      	ldr	r3, [pc, #236]	; (800511c <USB_EPStartXfer+0x494>)
 800502e:	400b      	ands	r3, r1
 8005030:	69b9      	ldr	r1, [r7, #24]
 8005032:	0148      	lsls	r0, r1, #5
 8005034:	69f9      	ldr	r1, [r7, #28]
 8005036:	4401      	add	r1, r0
 8005038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	8af9      	ldrh	r1, [r7, #22]
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505c:	69b9      	ldr	r1, [r7, #24]
 800505e:	0148      	lsls	r0, r1, #5
 8005060:	69f9      	ldr	r1, [r7, #28]
 8005062:	4401      	add	r1, r0
 8005064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005068:	4313      	orrs	r3, r2
 800506a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d10d      	bne.n	800508e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	68d9      	ldr	r1, [r3, #12]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	460a      	mov	r2, r1
 800508c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	78db      	ldrb	r3, [r3, #3]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d128      	bne.n	80050e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d110      	bne.n	80050c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e00f      	b.n	80050e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	fff80000 	.word	0xfff80000
 8005118:	e007ffff 	.word	0xe007ffff
 800511c:	1ff80000 	.word	0x1ff80000

08005120 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b01      	cmp	r3, #1
 800513e:	f040 80cd 	bne.w	80052dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d132      	bne.n	80051b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	0159      	lsls	r1, r3, #5
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	440b      	add	r3, r1
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	4619      	mov	r1, r3
 8005166:	4b98      	ldr	r3, [pc, #608]	; (80053c8 <USB_EP0StartXfer+0x2a8>)
 8005168:	4013      	ands	r3, r2
 800516a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800518a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	0159      	lsls	r1, r3, #5
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	440b      	add	r3, r1
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	4619      	mov	r1, r3
 80051a8:	4b88      	ldr	r3, [pc, #544]	; (80053cc <USB_EP0StartXfer+0x2ac>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	610b      	str	r3, [r1, #16]
 80051ae:	e04e      	b.n	800524e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	0159      	lsls	r1, r3, #5
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	440b      	add	r3, r1
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	4619      	mov	r1, r3
 80051cc:	4b7f      	ldr	r3, [pc, #508]	; (80053cc <USB_EP0StartXfer+0x2ac>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	0159      	lsls	r1, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	440b      	add	r3, r1
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	4619      	mov	r1, r3
 80051ee:	4b76      	ldr	r3, [pc, #472]	; (80053c8 <USB_EP0StartXfer+0x2a8>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d903      	bls.n	8005208 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800523e:	6939      	ldr	r1, [r7, #16]
 8005240:	0148      	lsls	r0, r1, #5
 8005242:	6979      	ldr	r1, [r7, #20]
 8005244:	4401      	add	r1, r0
 8005246:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800524a:	4313      	orrs	r3, r2
 800524c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d11e      	bne.n	8005292 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	461a      	mov	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e092      	b.n	80053b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d07e      	beq.n	80053b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	2101      	movs	r1, #1
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	6979      	ldr	r1, [r7, #20]
 80052d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d6:	4313      	orrs	r3, r2
 80052d8:	634b      	str	r3, [r1, #52]	; 0x34
 80052da:	e06d      	b.n	80053b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	0159      	lsls	r1, r3, #5
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	4619      	mov	r1, r3
 80052f8:	4b34      	ldr	r3, [pc, #208]	; (80053cc <USB_EP0StartXfer+0x2ac>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	0159      	lsls	r1, r3, #5
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	440b      	add	r3, r1
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	4619      	mov	r1, r3
 800531a:	4b2b      	ldr	r3, [pc, #172]	; (80053c8 <USB_EP0StartXfer+0x2a8>)
 800531c:	4013      	ands	r3, r2
 800531e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800534e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	691a      	ldr	r2, [r3, #16]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005366:	6939      	ldr	r1, [r7, #16]
 8005368:	0148      	lsls	r0, r1, #5
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	4401      	add	r1, r0
 800536e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005372:	4313      	orrs	r3, r2
 8005374:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d10d      	bne.n	8005398 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	68d9      	ldr	r1, [r3, #12]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	460a      	mov	r2, r1
 8005396:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e007ffff 	.word	0xe007ffff
 80053cc:	fff80000 	.word	0xfff80000

080053d0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b089      	sub	sp, #36	; 0x24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	4611      	mov	r1, r2
 80053dc:	461a      	mov	r2, r3
 80053de:	460b      	mov	r3, r1
 80053e0:	71fb      	strb	r3, [r7, #7]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80053ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11a      	bne.n	800542c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053f6:	88bb      	ldrh	r3, [r7, #4]
 80053f8:	3303      	adds	r3, #3
 80053fa:	089b      	lsrs	r3, r3, #2
 80053fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	e00f      	b.n	8005424 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	031a      	lsls	r2, r3, #12
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005410:	461a      	mov	r2, r3
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3304      	adds	r3, #4
 800541c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	3301      	adds	r3, #1
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	429a      	cmp	r2, r3
 800542a:	d3eb      	bcc.n	8005404 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3724      	adds	r7, #36	; 0x24
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800543a:	b480      	push	{r7}
 800543c:	b089      	sub	sp, #36	; 0x24
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	4613      	mov	r3, r2
 8005446:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	3303      	adds	r3, #3
 8005454:	089b      	lsrs	r3, r3, #2
 8005456:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005458:	2300      	movs	r3, #0
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e00b      	b.n	8005476 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	601a      	str	r2, [r3, #0]
    pDest++;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3304      	adds	r3, #4
 800546e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	3301      	adds	r3, #1
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	429a      	cmp	r2, r3
 800547c:	d3ef      	bcc.n	800545e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800547e:	69fb      	ldr	r3, [r7, #28]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3724      	adds	r7, #36	; 0x24
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d12c      	bne.n	8005502 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	db12      	blt.n	80054e0 <USB_EPSetStall+0x54>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00f      	beq.n	80054e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e02b      	b.n	800555a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	db12      	blt.n	800553a <USB_EPSetStall+0xae>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00f      	beq.n	800553a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005538:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005558:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d128      	bne.n	80055d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	78db      	ldrb	r3, [r3, #3]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d003      	beq.n	80055b4 <USB_EPClearStall+0x4c>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	78db      	ldrb	r3, [r3, #3]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d138      	bne.n	8005626 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	e027      	b.n	8005626 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	78db      	ldrb	r3, [r3, #3]
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d003      	beq.n	8005606 <USB_EPClearStall+0x9e>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	78db      	ldrb	r3, [r3, #3]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d10f      	bne.n	8005626 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005624:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005652:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005656:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569a:	f023 0302 	bic.w	r3, r3, #2
 800569e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80056a0:	2003      	movs	r0, #3
 80056a2:	f7fb fc17 	bl	8000ed4 <HAL_Delay>

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	f043 0302 	orr.w	r3, r3, #2
 80056ce:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80056d0:	2003      	movs	r0, #3
 80056d2:	f7fb fbff 	bl	8000ed4 <HAL_Delay>

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4013      	ands	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	4013      	ands	r3, r2
 8005728:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	0c1b      	lsrs	r3, r3, #16
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	b29b      	uxth	r3, r3
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4013      	ands	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800579c:	68bb      	ldr	r3, [r7, #8]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	fa22 f303 	lsr.w	r3, r2, r3
 80057da:	01db      	lsls	r3, r3, #7
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4013      	ands	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057f8:	68bb      	ldr	r3, [r7, #8]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f003 0301 	and.w	r3, r3, #1
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	4619      	mov	r1, r3
 8005840:	4b09      	ldr	r3, [pc, #36]	; (8005868 <USB_ActivateSetup+0x44>)
 8005842:	4013      	ands	r3, r2
 8005844:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005858:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	fffff800 	.word	0xfffff800

0800586c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	460b      	mov	r3, r1
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	333c      	adds	r3, #60	; 0x3c
 8005882:	3304      	adds	r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4a26      	ldr	r2, [pc, #152]	; (8005924 <USB_EP0_OutStart+0xb8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d90a      	bls.n	80058a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800589c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a0:	d101      	bne.n	80058a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e037      	b.n	8005916 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	2300      	movs	r3, #0
 80058b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d4:	f043 0318 	orr.w	r3, r3, #24
 80058d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d10f      	bne.n	8005914 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	4f54300a 	.word	0x4f54300a

08005928 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a13      	ldr	r2, [pc, #76]	; (800598c <USB_CoreReset+0x64>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e01b      	b.n	800597e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	daf2      	bge.n	8005934 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a09      	ldr	r2, [pc, #36]	; (800598c <USB_CoreReset+0x64>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e006      	b.n	800597e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b01      	cmp	r3, #1
 800597a:	d0f0      	beq.n	800595e <USB_CoreReset+0x36>

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	00030d40 	.word	0x00030d40

08005990 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800599c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059a0:	f002 f9a6 	bl	8007cf0 <malloc>
 80059a4:	4603      	mov	r3, r0
 80059a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d105      	bne.n	80059ba <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80059b6:	2302      	movs	r3, #2
 80059b8:	e066      	b.n	8005a88 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	7c1b      	ldrb	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d119      	bne.n	80059fe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ce:	2202      	movs	r2, #2
 80059d0:	2181      	movs	r1, #129	; 0x81
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 ffbf 	bl	8007956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e2:	2202      	movs	r2, #2
 80059e4:	2101      	movs	r1, #1
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 ffb5 	bl	8007956 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2210      	movs	r2, #16
 80059f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80059fc:	e016      	b.n	8005a2c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	2202      	movs	r2, #2
 8005a02:	2181      	movs	r1, #129	; 0x81
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 ffa6 	bl	8007956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a10:	2340      	movs	r3, #64	; 0x40
 8005a12:	2202      	movs	r2, #2
 8005a14:	2101      	movs	r1, #1
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 ff9d 	bl	8007956 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2210      	movs	r2, #16
 8005a28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	2203      	movs	r2, #3
 8005a30:	2182      	movs	r1, #130	; 0x82
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 ff8f 	bl	8007956 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7c1b      	ldrb	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f002 f860 	bl	8007b34 <USBD_LL_PrepareReceive>
 8005a74:	e007      	b.n	8005a86 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	2101      	movs	r1, #1
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f002 f857 	bl	8007b34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005aa0:	2181      	movs	r1, #129	; 0x81
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 ff7d 	bl	80079a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005aae:	2101      	movs	r1, #1
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 ff76 	bl	80079a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005abe:	2182      	movs	r1, #130	; 0x82
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 ff6e 	bl	80079a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 f905 	bl	8007d00 <free>
    pdev->pClassData = NULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b18:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d03a      	beq.n	8005ba8 <USBD_CDC_Setup+0xa0>
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	f040 8097 	bne.w	8005c66 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	88db      	ldrh	r3, [r3, #6]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d029      	beq.n	8005b94 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b25b      	sxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	da11      	bge.n	8005b6e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005b56:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	88d2      	ldrh	r2, [r2, #6]
 8005b5c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b5e:	6939      	ldr	r1, [r7, #16]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	88db      	ldrh	r3, [r3, #6]
 8005b64:	461a      	mov	r2, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fa97 	bl	800709a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005b6c:	e082      	b.n	8005c74 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	785a      	ldrb	r2, [r3, #1]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	88db      	ldrh	r3, [r3, #6]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b84:	6939      	ldr	r1, [r7, #16]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	88db      	ldrh	r3, [r3, #6]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 fab0 	bl	80070f2 <USBD_CtlPrepareRx>
    break;
 8005b92:	e06f      	b.n	8005c74 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	7850      	ldrb	r0, [r2, #1]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	4798      	blx	r3
    break;
 8005ba6:	e065      	b.n	8005c74 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b0b      	cmp	r3, #11
 8005bae:	d84f      	bhi.n	8005c50 <USBD_CDC_Setup+0x148>
 8005bb0:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <USBD_CDC_Setup+0xb0>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005be9 	.word	0x08005be9
 8005bbc:	08005c5f 	.word	0x08005c5f
 8005bc0:	08005c51 	.word	0x08005c51
 8005bc4:	08005c51 	.word	0x08005c51
 8005bc8:	08005c51 	.word	0x08005c51
 8005bcc:	08005c51 	.word	0x08005c51
 8005bd0:	08005c51 	.word	0x08005c51
 8005bd4:	08005c51 	.word	0x08005c51
 8005bd8:	08005c51 	.word	0x08005c51
 8005bdc:	08005c51 	.word	0x08005c51
 8005be0:	08005c11 	.word	0x08005c11
 8005be4:	08005c39 	.word	0x08005c39
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d107      	bne.n	8005c02 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 fa4d 	bl	800709a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c00:	e030      	b.n	8005c64 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f9d7 	bl	8006fb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0e:	e029      	b.n	8005c64 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d107      	bne.n	8005c2a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c1a:	f107 030f 	add.w	r3, r7, #15
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fa39 	bl	800709a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c28:	e01c      	b.n	8005c64 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f9c3 	bl	8006fb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c32:	2303      	movs	r3, #3
 8005c34:	75fb      	strb	r3, [r7, #23]
      break;
 8005c36:	e015      	b.n	8005c64 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d00f      	beq.n	8005c62 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 f9b7 	bl	8006fb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c4e:	e008      	b.n	8005c62 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 f9b0 	bl	8006fb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5c:	e002      	b.n	8005c64 <USBD_CDC_Setup+0x15c>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e008      	b.n	8005c74 <USBD_CDC_Setup+0x16c>
      break;
 8005c62:	bf00      	nop
    }
    break;
 8005c64:	e006      	b.n	8005c74 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 f9a5 	bl	8006fb8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	75fb      	strb	r3, [r7, #23]
    break;
 8005c72:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop

08005c80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e049      	b.n	8005d36 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ca8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3318      	adds	r3, #24
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d029      	beq.n	8005d14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	3318      	adds	r3, #24
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	78f9      	ldrb	r1, [r7, #3]
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	1a5b      	subs	r3, r3, r1
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4403      	add	r3, r0
 8005ce0:	3344      	adds	r3, #68	; 0x44
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ce8:	fb03 f301 	mul.w	r3, r3, r1
 8005cec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d110      	bne.n	8005d14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	3318      	adds	r3, #24
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d06:	78f9      	ldrb	r1, [r7, #3]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fef0 	bl	8007af2 <USBD_LL_Transmit>
 8005d12:	e00f      	b.n	8005d34 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e015      	b.n	8005d8c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 ff06 	bl	8007b76 <USBD_LL_GetRxDataSize>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d86:	4611      	mov	r1, r2
 8005d88:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d015      	beq.n	8005dda <USBD_CDC_EP0_RxReady+0x46>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005db4:	2bff      	cmp	r3, #255	; 0xff
 8005db6:	d010      	beq.n	8005dda <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005dc6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dce:	b292      	uxth	r2, r2
 8005dd0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	22ff      	movs	r2, #255	; 0xff
 8005dd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2243      	movs	r2, #67	; 0x43
 8005df0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005df2:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000494 	.word	0x20000494

08005e04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2243      	movs	r2, #67	; 0x43
 8005e10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e12:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	20000450 	.word	0x20000450

08005e24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2243      	movs	r2, #67	; 0x43
 8005e30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	200004d8 	.word	0x200004d8

08005e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	220a      	movs	r2, #10
 8005e50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e52:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	2000040c 	.word	0x2000040c

08005e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e004      	b.n	8005e82 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b087      	sub	sp, #28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ed0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e016      	b.n	8005f34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7c1b      	ldrb	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fe0a 	bl	8007b34 <USBD_LL_PrepareReceive>
 8005f20:	e007      	b.n	8005f32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 fe01 	bl	8007b34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e025      	b.n	8005fa0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	79fa      	ldrb	r2, [r7, #7]
 8005f92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f001 fc77 	bl	8007888 <USBD_LL_Init>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e010      	b.n	8005fe2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	f107 020e 	add.w	r2, r7, #14
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fc94 	bl	8007920 <USBD_LL_Start>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	4611      	mov	r1, r2
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
 8006042:	4603      	mov	r3, r0
 8006044:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	4611      	mov	r1, r2
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
  }

  return USBD_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 ff56 	bl	8006f44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060a6:	461a      	mov	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d00e      	beq.n	80060da <USBD_LL_SetupStage+0x5a>
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d302      	bcc.n	80060c6 <USBD_LL_SetupStage+0x46>
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d014      	beq.n	80060ee <USBD_LL_SetupStage+0x6e>
 80060c4:	e01d      	b.n	8006102 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fa18 	bl	8006504 <USBD_StdDevReq>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
      break;
 80060d8:	e020      	b.n	800611c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa7c 	bl	80065e0 <USBD_StdItfReq>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e016      	b.n	800611c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fab8 	bl	800666c <USBD_StdEPReq>
 80060fc:	4603      	mov	r3, r0
 80060fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006100:	e00c      	b.n	800611c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006108:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800610c:	b2db      	uxtb	r3, r3
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fc65 	bl	80079e0 <USBD_LL_StallEP>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]
      break;
 800611a:	bf00      	nop
  }

  return ret;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b086      	sub	sp, #24
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	460b      	mov	r3, r1
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006134:	7afb      	ldrb	r3, [r7, #11]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d137      	bne.n	80061aa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006140:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006148:	2b03      	cmp	r3, #3
 800614a:	d14a      	bne.n	80061e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	429a      	cmp	r2, r3
 8006156:	d913      	bls.n	8006180 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	1ad2      	subs	r2, r2, r3
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4293      	cmp	r3, r2
 8006170:	bf28      	it	cs
 8006172:	4613      	movcs	r3, r2
 8006174:	461a      	mov	r2, r3
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 ffd7 	bl	800712c <USBD_CtlContinueRx>
 800617e:	e030      	b.n	80061e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006192:	2b03      	cmp	r3, #3
 8006194:	d105      	bne.n	80061a2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 ffd3 	bl	800714e <USBD_CtlSendStatus>
 80061a8:	e01b      	b.n	80061e2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d013      	beq.n	80061de <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d10e      	bne.n	80061de <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	7afa      	ldrb	r2, [r7, #11]
 80061ca:	4611      	mov	r1, r2
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	4798      	blx	r3
 80061d0:	4603      	mov	r3, r0
 80061d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	e002      	b.n	80061e4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061de:	2303      	movs	r3, #3
 80061e0:	e000      	b.n	80061e4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	460b      	mov	r3, r1
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d16a      	bne.n	80062d6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3314      	adds	r3, #20
 8006204:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800620c:	2b02      	cmp	r3, #2
 800620e:	d155      	bne.n	80062bc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	429a      	cmp	r2, r3
 800621a:	d914      	bls.n	8006246 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	1ad2      	subs	r2, r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	461a      	mov	r2, r3
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 ff4c 	bl	80070d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006238:	2300      	movs	r3, #0
 800623a:	2200      	movs	r2, #0
 800623c:	2100      	movs	r1, #0
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f001 fc78 	bl	8007b34 <USBD_LL_PrepareReceive>
 8006244:	e03a      	b.n	80062bc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	d11c      	bne.n	800628c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800625a:	429a      	cmp	r2, r3
 800625c:	d316      	bcc.n	800628c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006268:	429a      	cmp	r2, r3
 800626a:	d20f      	bcs.n	800628c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800626c:	2200      	movs	r2, #0
 800626e:	2100      	movs	r1, #0
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 ff2d 	bl	80070d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800627e:	2300      	movs	r3, #0
 8006280:	2200      	movs	r2, #0
 8006282:	2100      	movs	r1, #0
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f001 fc55 	bl	8007b34 <USBD_LL_PrepareReceive>
 800628a:	e017      	b.n	80062bc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d105      	bne.n	80062ae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ae:	2180      	movs	r1, #128	; 0x80
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f001 fb95 	bl	80079e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 ff5c 	bl	8007174 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d123      	bne.n	800630e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff fe9b 	bl	8006002 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062d4:	e01b      	b.n	800630e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d013      	beq.n	800630a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d10e      	bne.n	800630a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	7afa      	ldrb	r2, [r7, #11]
 80062f6:	4611      	mov	r1, r2
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	4798      	blx	r3
 80062fc:	4603      	mov	r3, r0
 80062fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	e002      	b.n	8006310 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800630a:	2303      	movs	r3, #3
 800630c:	e000      	b.n	8006310 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6852      	ldr	r2, [r2, #4]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	4611      	mov	r1, r2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800635c:	2340      	movs	r3, #64	; 0x40
 800635e:	2200      	movs	r2, #0
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 faf7 	bl	8007956 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2240      	movs	r2, #64	; 0x40
 8006374:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	2200      	movs	r2, #0
 800637c:	2180      	movs	r1, #128	; 0x80
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 fae9 	bl	8007956 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2240      	movs	r2, #64	; 0x40
 800638e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d105      	bne.n	8006402 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641e:	2b03      	cmp	r3, #3
 8006420:	d10b      	bne.n	800643a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6852      	ldr	r2, [r2, #4]
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	4611      	mov	r1, r2
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	4798      	blx	r3
  }

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	3301      	adds	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064e4:	8a3b      	ldrh	r3, [r7, #16]
 80064e6:	021b      	lsls	r3, r3, #8
 80064e8:	b21a      	sxth	r2, r3
 80064ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064f4:	89fb      	ldrh	r3, [r7, #14]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800651a:	2b20      	cmp	r3, #32
 800651c:	d004      	beq.n	8006528 <USBD_StdDevReq+0x24>
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d002      	beq.n	8006528 <USBD_StdDevReq+0x24>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <USBD_StdDevReq+0x38>
 8006526:	e050      	b.n	80065ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
 8006536:	4603      	mov	r3, r0
 8006538:	73fb      	strb	r3, [r7, #15]
    break;
 800653a:	e04b      	b.n	80065d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b09      	cmp	r3, #9
 8006542:	d83c      	bhi.n	80065be <USBD_StdDevReq+0xba>
 8006544:	a201      	add	r2, pc, #4	; (adr r2, 800654c <USBD_StdDevReq+0x48>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	080065a1 	.word	0x080065a1
 8006550:	080065b5 	.word	0x080065b5
 8006554:	080065bf 	.word	0x080065bf
 8006558:	080065ab 	.word	0x080065ab
 800655c:	080065bf 	.word	0x080065bf
 8006560:	0800657f 	.word	0x0800657f
 8006564:	08006575 	.word	0x08006575
 8006568:	080065bf 	.word	0x080065bf
 800656c:	08006597 	.word	0x08006597
 8006570:	08006589 	.word	0x08006589
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9ce 	bl	8006918 <USBD_GetDescriptor>
      break;
 800657c:	e024      	b.n	80065c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb5d 	bl	8006c40 <USBD_SetAddress>
      break;
 8006586:	e01f      	b.n	80065c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fb9a 	bl	8006cc4 <USBD_SetConfig>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
      break;
 8006594:	e018      	b.n	80065c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fc37 	bl	8006e0c <USBD_GetConfig>
      break;
 800659e:	e013      	b.n	80065c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fc66 	bl	8006e74 <USBD_GetStatus>
      break;
 80065a8:	e00e      	b.n	80065c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fc94 	bl	8006eda <USBD_SetFeature>
      break;
 80065b2:	e009      	b.n	80065c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fca3 	bl	8006f02 <USBD_ClrFeature>
      break;
 80065bc:	e004      	b.n	80065c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fcf9 	bl	8006fb8 <USBD_CtlError>
      break;
 80065c6:	bf00      	nop
    }
    break;
 80065c8:	e004      	b.n	80065d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fcf3 	bl	8006fb8 <USBD_CtlError>
    break;
 80065d2:	bf00      	nop
  }

  return ret;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop

080065e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d003      	beq.n	8006602 <USBD_StdItfReq+0x22>
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d001      	beq.n	8006602 <USBD_StdItfReq+0x22>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d12a      	bne.n	8006658 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006608:	3b01      	subs	r3, #1
 800660a:	2b02      	cmp	r3, #2
 800660c:	d81d      	bhi.n	800664a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	889b      	ldrh	r3, [r3, #4]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d813      	bhi.n	8006640 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	88db      	ldrh	r3, [r3, #6]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d110      	bne.n	8006654 <USBD_StdItfReq+0x74>
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10d      	bne.n	8006654 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fd88 	bl	800714e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800663e:	e009      	b.n	8006654 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fcb8 	bl	8006fb8 <USBD_CtlError>
      break;
 8006648:	e004      	b.n	8006654 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fcb3 	bl	8006fb8 <USBD_CtlError>
      break;
 8006652:	e000      	b.n	8006656 <USBD_StdItfReq+0x76>
      break;
 8006654:	bf00      	nop
    }
    break;
 8006656:	e004      	b.n	8006662 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fcac 	bl	8006fb8 <USBD_CtlError>
    break;
 8006660:	bf00      	nop
  }

  return ret;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	889b      	ldrh	r3, [r3, #4]
 800667e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006688:	2b20      	cmp	r3, #32
 800668a:	d004      	beq.n	8006696 <USBD_StdEPReq+0x2a>
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d002      	beq.n	8006696 <USBD_StdEPReq+0x2a>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <USBD_StdEPReq+0x3e>
 8006694:	e135      	b.n	8006902 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
 80066a4:	4603      	mov	r3, r0
 80066a6:	73fb      	strb	r3, [r7, #15]
    break;
 80066a8:	e130      	b.n	800690c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d03e      	beq.n	8006730 <USBD_StdEPReq+0xc4>
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d002      	beq.n	80066bc <USBD_StdEPReq+0x50>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d077      	beq.n	80067aa <USBD_StdEPReq+0x13e>
 80066ba:	e11c      	b.n	80068f6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d002      	beq.n	80066cc <USBD_StdEPReq+0x60>
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d015      	beq.n	80066f6 <USBD_StdEPReq+0x8a>
 80066ca:	e02b      	b.n	8006724 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00c      	beq.n	80066ec <USBD_StdEPReq+0x80>
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b80      	cmp	r3, #128	; 0x80
 80066d6:	d009      	beq.n	80066ec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 f97f 	bl	80079e0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 f97b 	bl	80079e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066ea:	e020      	b.n	800672e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fc62 	bl	8006fb8 <USBD_CtlError>
        break;
 80066f4:	e01b      	b.n	800672e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10e      	bne.n	800671c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_StdEPReq+0xb0>
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	d008      	beq.n	800671c <USBD_StdEPReq+0xb0>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	88db      	ldrh	r3, [r3, #6]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 f962 	bl	80079e0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fd16 	bl	800714e <USBD_CtlSendStatus>

        break;
 8006722:	e004      	b.n	800672e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fc46 	bl	8006fb8 <USBD_CtlError>
        break;
 800672c:	bf00      	nop
      }
      break;
 800672e:	e0e7      	b.n	8006900 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006736:	2b02      	cmp	r3, #2
 8006738:	d002      	beq.n	8006740 <USBD_StdEPReq+0xd4>
 800673a:	2b03      	cmp	r3, #3
 800673c:	d015      	beq.n	800676a <USBD_StdEPReq+0xfe>
 800673e:	e02d      	b.n	800679c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <USBD_StdEPReq+0xf4>
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2b80      	cmp	r3, #128	; 0x80
 800674a:	d009      	beq.n	8006760 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 f945 	bl	80079e0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006756:	2180      	movs	r1, #128	; 0x80
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 f941 	bl	80079e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800675e:	e023      	b.n	80067a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fc28 	bl	8006fb8 <USBD_CtlError>
        break;
 8006768:	e01e      	b.n	80067a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	885b      	ldrh	r3, [r3, #2]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d119      	bne.n	80067a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f94c 	bl	8007a1e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fce1 	bl	800714e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
        }
        break;
 800679a:	e004      	b.n	80067a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fc0a 	bl	8006fb8 <USBD_CtlError>
        break;
 80067a4:	e000      	b.n	80067a8 <USBD_StdEPReq+0x13c>
        break;
 80067a6:	bf00      	nop
      }
      break;
 80067a8:	e0aa      	b.n	8006900 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d002      	beq.n	80067ba <USBD_StdEPReq+0x14e>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d032      	beq.n	800681e <USBD_StdEPReq+0x1b2>
 80067b8:	e097      	b.n	80068ea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <USBD_StdEPReq+0x164>
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d004      	beq.n	80067d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fbf5 	bl	8006fb8 <USBD_CtlError>
          break;
 80067ce:	e091      	b.n	80068f4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	da0b      	bge.n	80067f0 <USBD_StdEPReq+0x184>
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	3310      	adds	r3, #16
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	3304      	adds	r3, #4
 80067ee:	e00b      	b.n	8006808 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	3304      	adds	r3, #4
 8006808:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2202      	movs	r2, #2
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fc3f 	bl	800709a <USBD_CtlSendData>
        break;
 800681c:	e06a      	b.n	80068f4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800681e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	da11      	bge.n	800684a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	f003 020f 	and.w	r2, r3, #15
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	3324      	adds	r3, #36	; 0x24
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d117      	bne.n	8006870 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fbb8 	bl	8006fb8 <USBD_CtlError>
            break;
 8006848:	e054      	b.n	80068f4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	f003 020f 	and.w	r2, r3, #15
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fba5 	bl	8006fb8 <USBD_CtlError>
            break;
 800686e:	e041      	b.n	80068f4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	da0b      	bge.n	8006890 <USBD_StdEPReq+0x224>
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	3310      	adds	r3, #16
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	4413      	add	r3, r2
 800688c:	3304      	adds	r3, #4
 800688e:	e00b      	b.n	80068a8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	3304      	adds	r3, #4
 80068a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <USBD_StdEPReq+0x24a>
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d103      	bne.n	80068be <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	e00e      	b.n	80068dc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 f8ca 	bl	8007a5c <USBD_LL_IsStallEP>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2201      	movs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e002      	b.n	80068dc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2202      	movs	r2, #2
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fbd9 	bl	800709a <USBD_CtlSendData>
          break;
 80068e8:	e004      	b.n	80068f4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fb63 	bl	8006fb8 <USBD_CtlError>
        break;
 80068f2:	bf00      	nop
      }
      break;
 80068f4:	e004      	b.n	8006900 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fb5d 	bl	8006fb8 <USBD_CtlError>
      break;
 80068fe:	bf00      	nop
    }
    break;
 8006900:	e004      	b.n	800690c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fb57 	bl	8006fb8 <USBD_CtlError>
    break;
 800690a:	bf00      	nop
  }

  return ret;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	2b0e      	cmp	r3, #14
 800693a:	f200 8152 	bhi.w	8006be2 <USBD_GetDescriptor+0x2ca>
 800693e:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <USBD_GetDescriptor+0x2c>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	080069b5 	.word	0x080069b5
 8006948:	080069cd 	.word	0x080069cd
 800694c:	08006a0d 	.word	0x08006a0d
 8006950:	08006be3 	.word	0x08006be3
 8006954:	08006be3 	.word	0x08006be3
 8006958:	08006b83 	.word	0x08006b83
 800695c:	08006baf 	.word	0x08006baf
 8006960:	08006be3 	.word	0x08006be3
 8006964:	08006be3 	.word	0x08006be3
 8006968:	08006be3 	.word	0x08006be3
 800696c:	08006be3 	.word	0x08006be3
 8006970:	08006be3 	.word	0x08006be3
 8006974:	08006be3 	.word	0x08006be3
 8006978:	08006be3 	.word	0x08006be3
 800697c:	08006981 	.word	0x08006981
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	7c12      	ldrb	r2, [r2, #16]
 8006998:	f107 0108 	add.w	r1, r7, #8
 800699c:	4610      	mov	r0, r2
 800699e:	4798      	blx	r3
 80069a0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80069a2:	e126      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fb06 	bl	8006fb8 <USBD_CtlError>
      err++;
 80069ac:	7afb      	ldrb	r3, [r7, #11]
 80069ae:	3301      	adds	r3, #1
 80069b0:	72fb      	strb	r3, [r7, #11]
    break;
 80069b2:	e11e      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7c12      	ldrb	r2, [r2, #16]
 80069c0:	f107 0108 	add.w	r1, r7, #8
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	60f8      	str	r0, [r7, #12]
    break;
 80069ca:	e112      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10d      	bne.n	80069f0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f107 0208 	add.w	r2, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	2202      	movs	r2, #2
 80069ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80069ee:	e100      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	f107 0208 	add.w	r2, r7, #8
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	2202      	movs	r2, #2
 8006a08:	701a      	strb	r2, [r3, #0]
    break;
 8006a0a:	e0f2      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	f200 80ac 	bhi.w	8006b70 <USBD_GetDescriptor+0x258>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <USBD_GetDescriptor+0x108>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a39 	.word	0x08006a39
 8006a24:	08006a6d 	.word	0x08006a6d
 8006a28:	08006aa1 	.word	0x08006aa1
 8006a2c:	08006ad5 	.word	0x08006ad5
 8006a30:	08006b09 	.word	0x08006b09
 8006a34:	08006b3d 	.word	0x08006b3d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	7c12      	ldrb	r2, [r2, #16]
 8006a50:	f107 0108 	add.w	r1, r7, #8
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a5a:	e091      	b.n	8006b80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 faaa 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	3301      	adds	r3, #1
 8006a68:	72fb      	strb	r3, [r7, #11]
      break;
 8006a6a:	e089      	b.n	8006b80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	7c12      	ldrb	r2, [r2, #16]
 8006a84:	f107 0108 	add.w	r1, r7, #8
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
 8006a8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a8e:	e077      	b.n	8006b80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa90 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a9e:	e06f      	b.n	8006b80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	7c12      	ldrb	r2, [r2, #16]
 8006ab8:	f107 0108 	add.w	r1, r7, #8
 8006abc:	4610      	mov	r0, r2
 8006abe:	4798      	blx	r3
 8006ac0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ac2:	e05d      	b.n	8006b80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa76 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006acc:	7afb      	ldrb	r3, [r7, #11]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad2:	e055      	b.n	8006b80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	7c12      	ldrb	r2, [r2, #16]
 8006aec:	f107 0108 	add.w	r1, r7, #8
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af6:	e043      	b.n	8006b80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa5c 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006b00:	7afb      	ldrb	r3, [r7, #11]
 8006b02:	3301      	adds	r3, #1
 8006b04:	72fb      	strb	r3, [r7, #11]
      break;
 8006b06:	e03b      	b.n	8006b80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	7c12      	ldrb	r2, [r2, #16]
 8006b20:	f107 0108 	add.w	r1, r7, #8
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b2a:	e029      	b.n	8006b80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa42 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	3301      	adds	r3, #1
 8006b38:	72fb      	strb	r3, [r7, #11]
      break;
 8006b3a:	e021      	b.n	8006b80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	7c12      	ldrb	r2, [r2, #16]
 8006b54:	f107 0108 	add.w	r1, r7, #8
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4798      	blx	r3
 8006b5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b5e:	e00f      	b.n	8006b80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa28 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	72fb      	strb	r3, [r7, #11]
      break;
 8006b6e:	e007      	b.n	8006b80 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa20 	bl	8006fb8 <USBD_CtlError>
      err++;
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006b7e:	bf00      	nop
    }
    break;
 8006b80:	e037      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7c1b      	ldrb	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	f107 0208 	add.w	r2, r7, #8
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
 8006b9a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b9c:	e029      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa09 	bl	8006fb8 <USBD_CtlError>
      err++;
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	72fb      	strb	r3, [r7, #11]
    break;
 8006bac:	e021      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f107 0208 	add.w	r2, r7, #8
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4798      	blx	r3
 8006bc6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	2207      	movs	r2, #7
 8006bce:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006bd0:	e00f      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f9ef 	bl	8006fb8 <USBD_CtlError>
      err++;
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	72fb      	strb	r3, [r7, #11]
    break;
 8006be0:	e007      	b.n	8006bf2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9e7 	bl	8006fb8 <USBD_CtlError>
    err++;
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	3301      	adds	r3, #1
 8006bee:	72fb      	strb	r3, [r7, #11]
    break;
 8006bf0:	bf00      	nop
  }

  if (err != 0U)
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11e      	bne.n	8006c36 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	88db      	ldrh	r3, [r3, #6]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d016      	beq.n	8006c2e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00e      	beq.n	8006c24 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	88da      	ldrh	r2, [r3, #6]
 8006c0a:	893b      	ldrh	r3, [r7, #8]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bf28      	it	cs
 8006c10:	4613      	movcs	r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c16:	893b      	ldrh	r3, [r7, #8]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa3c 	bl	800709a <USBD_CtlSendData>
 8006c22:	e009      	b.n	8006c38 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9c6 	bl	8006fb8 <USBD_CtlError>
 8006c2c:	e004      	b.n	8006c38 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa8d 	bl	800714e <USBD_CtlSendStatus>
 8006c34:	e000      	b.n	8006c38 <USBD_GetDescriptor+0x320>
    return;
 8006c36:	bf00      	nop
    }
  }
}
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop

08006c40 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	889b      	ldrh	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d130      	bne.n	8006cb4 <USBD_SetAddress+0x74>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	88db      	ldrh	r3, [r3, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d12c      	bne.n	8006cb4 <USBD_SetAddress+0x74>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	885b      	ldrh	r3, [r3, #2]
 8006c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c60:	d828      	bhi.n	8006cb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	885b      	ldrh	r3, [r3, #2]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d104      	bne.n	8006c82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f99c 	bl	8006fb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c80:	e01c      	b.n	8006cbc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	7bfa      	ldrb	r2, [r7, #15]
 8006c86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 ff10 	bl	8007ab4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fa5a 	bl	800714e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca8:	e008      	b.n	8006cbc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb2:	e003      	b.n	8006cbc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f97e 	bl	8006fb8 <USBD_CtlError>
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	4b4b      	ldr	r3, [pc, #300]	; (8006e08 <USBD_SetConfig+0x144>)
 8006cda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cdc:	4b4a      	ldr	r3, [pc, #296]	; (8006e08 <USBD_SetConfig+0x144>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d905      	bls.n	8006cf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f966 	bl	8006fb8 <USBD_CtlError>
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e087      	b.n	8006e00 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d002      	beq.n	8006d00 <USBD_SetConfig+0x3c>
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d025      	beq.n	8006d4a <USBD_SetConfig+0x86>
 8006cfe:	e071      	b.n	8006de4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006d00:	4b41      	ldr	r3, [pc, #260]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01c      	beq.n	8006d42 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006d08:	4b3f      	ldr	r3, [pc, #252]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d12:	4b3d      	ldr	r3, [pc, #244]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff f97d 	bl	8006018 <USBD_SetClassConfig>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f944 	bl	8006fb8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d30:	e065      	b.n	8006dfe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa0b 	bl	800714e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d40:	e05d      	b.n	8006dfe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa03 	bl	800714e <USBD_CtlSendStatus>
    break;
 8006d48:	e059      	b.n	8006dfe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006d4a:	4b2f      	ldr	r3, [pc, #188]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d112      	bne.n	8006d78 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006d5a:	4b2b      	ldr	r3, [pc, #172]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d64:	4b28      	ldr	r3, [pc, #160]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff f970 	bl	8006050 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f9ec 	bl	800714e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d76:	e042      	b.n	8006dfe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006d78:	4b23      	ldr	r3, [pc, #140]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d02a      	beq.n	8006ddc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff f95e 	bl	8006050 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006d94:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d9e:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <USBD_SetConfig+0x144>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff f937 	bl	8006018 <USBD_SetClassConfig>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00f      	beq.n	8006dd4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8fe 	bl	8006fb8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff f943 	bl	8006050 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006dd2:	e014      	b.n	8006dfe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f9ba 	bl	800714e <USBD_CtlSendStatus>
    break;
 8006dda:	e010      	b.n	8006dfe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f9b6 	bl	800714e <USBD_CtlSendStatus>
    break;
 8006de2:	e00c      	b.n	8006dfe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f8e6 	bl	8006fb8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <USBD_SetConfig+0x144>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff f92c 	bl	8006050 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfc:	bf00      	nop
  }

  return ret;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000620 	.word	0x20000620

08006e0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d004      	beq.n	8006e28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8c9 	bl	8006fb8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006e26:	e021      	b.n	8006e6c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	db17      	blt.n	8006e62 <USBD_GetConfig+0x56>
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	dd02      	ble.n	8006e3c <USBD_GetConfig+0x30>
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d00b      	beq.n	8006e52 <USBD_GetConfig+0x46>
 8006e3a:	e012      	b.n	8006e62 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3308      	adds	r3, #8
 8006e46:	2201      	movs	r2, #1
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f925 	bl	800709a <USBD_CtlSendData>
      break;
 8006e50:	e00c      	b.n	8006e6c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3304      	adds	r3, #4
 8006e56:	2201      	movs	r2, #1
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f91d 	bl	800709a <USBD_CtlSendData>
      break;
 8006e60:	e004      	b.n	8006e6c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8a7 	bl	8006fb8 <USBD_CtlError>
      break;
 8006e6a:	bf00      	nop
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e84:	3b01      	subs	r3, #1
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d81e      	bhi.n	8006ec8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	88db      	ldrh	r3, [r3, #6]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d004      	beq.n	8006e9c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f88f 	bl	8006fb8 <USBD_CtlError>
      break;
 8006e9a:	e01a      	b.n	8006ed2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f043 0202 	orr.w	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f8ea 	bl	800709a <USBD_CtlSendData>
    break;
 8006ec6:	e004      	b.n	8006ed2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f874 	bl	8006fb8 <USBD_CtlError>
    break;
 8006ed0:	bf00      	nop
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	885b      	ldrh	r3, [r3, #2]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d106      	bne.n	8006efa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f92a 	bl	800714e <USBD_CtlSendStatus>
  }
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f12:	3b01      	subs	r3, #1
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d80b      	bhi.n	8006f30 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	885b      	ldrh	r3, [r3, #2]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d10c      	bne.n	8006f3a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f910 	bl	800714e <USBD_CtlSendStatus>
      }
      break;
 8006f2e:	e004      	b.n	8006f3a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f840 	bl	8006fb8 <USBD_CtlError>
      break;
 8006f38:	e000      	b.n	8006f3c <USBD_ClrFeature+0x3a>
      break;
 8006f3a:	bf00      	nop
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff faa9 	bl	80064c6 <SWAPBYTE>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff fa9c 	bl	80064c6 <SWAPBYTE>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff fa8f 	bl	80064c6 <SWAPBYTE>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	80da      	strh	r2, [r3, #6]
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fc2:	2180      	movs	r1, #128	; 0x80
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fd0b 	bl	80079e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fca:	2100      	movs	r1, #0
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fd07 	bl	80079e0 <USBD_LL_StallEP>
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b086      	sub	sp, #24
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d036      	beq.n	800705e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ff4:	6938      	ldr	r0, [r7, #16]
 8006ff6:	f000 f836 	bl	8007066 <USBD_GetLen>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4413      	add	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	701a      	strb	r2, [r3, #0]
  idx++;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	3301      	adds	r3, #1
 8007018:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4413      	add	r3, r2
 8007020:	2203      	movs	r2, #3
 8007022:	701a      	strb	r2, [r3, #0]
  idx++;
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	3301      	adds	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800702a:	e013      	b.n	8007054 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	4413      	add	r3, r2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	613b      	str	r3, [r7, #16]
    idx++;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	3301      	adds	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4413      	add	r3, r2
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
    idx++;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	3301      	adds	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e7      	bne.n	800702c <USBD_GetString+0x52>
 800705c:	e000      	b.n	8007060 <USBD_GetString+0x86>
    return;
 800705e:	bf00      	nop
  }
}
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007076:	e005      	b.n	8007084 <USBD_GetLen+0x1e>
  {
    len++;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	3301      	adds	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	3301      	adds	r3, #1
 8007082:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f5      	bne.n	8007078 <USBD_GetLen+0x12>
  }

  return len;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2202      	movs	r2, #2
 80070aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	2100      	movs	r1, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fd16 	bl	8007af2 <USBD_LL_Transmit>

  return USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fd05 	bl	8007af2 <USBD_LL_Transmit>

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2203      	movs	r2, #3
 8007102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	2100      	movs	r1, #0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fd09 	bl	8007b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	2100      	movs	r1, #0
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fcf8 	bl	8007b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2204      	movs	r2, #4
 800715a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800715e:	2300      	movs	r3, #0
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fcc4 	bl	8007af2 <USBD_LL_Transmit>

  return USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2205      	movs	r2, #5
 8007180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007184:	2300      	movs	r3, #0
 8007186:	2200      	movs	r2, #0
 8007188:	2100      	movs	r1, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fcd2 	bl	8007b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071a0:	2200      	movs	r2, #0
 80071a2:	4912      	ldr	r1, [pc, #72]	; (80071ec <MX_USB_DEVICE_Init+0x50>)
 80071a4:	4812      	ldr	r0, [pc, #72]	; (80071f0 <MX_USB_DEVICE_Init+0x54>)
 80071a6:	f7fe fec9 	bl	8005f3c <USBD_Init>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071b0:	f7f9 fb7c 	bl	80008ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80071b4:	490f      	ldr	r1, [pc, #60]	; (80071f4 <MX_USB_DEVICE_Init+0x58>)
 80071b6:	480e      	ldr	r0, [pc, #56]	; (80071f0 <MX_USB_DEVICE_Init+0x54>)
 80071b8:	f7fe fef6 	bl	8005fa8 <USBD_RegisterClass>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071c2:	f7f9 fb73 	bl	80008ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80071c6:	490c      	ldr	r1, [pc, #48]	; (80071f8 <MX_USB_DEVICE_Init+0x5c>)
 80071c8:	4809      	ldr	r0, [pc, #36]	; (80071f0 <MX_USB_DEVICE_Init+0x54>)
 80071ca:	f7fe fe4b 	bl	8005e64 <USBD_CDC_RegisterInterface>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071d4:	f7f9 fb6a 	bl	80008ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071d8:	4805      	ldr	r0, [pc, #20]	; (80071f0 <MX_USB_DEVICE_Init+0x54>)
 80071da:	f7fe ff06 	bl	8005fea <USBD_Start>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071e4:	f7f9 fb62 	bl	80008ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071e8:	bf00      	nop
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000538 	.word	0x20000538
 80071f0:	200006b8 	.word	0x200006b8
 80071f4:	20000418 	.word	0x20000418
 80071f8:	20000524 	.word	0x20000524

080071fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007200:	2200      	movs	r2, #0
 8007202:	4905      	ldr	r1, [pc, #20]	; (8007218 <CDC_Init_FS+0x1c>)
 8007204:	4805      	ldr	r0, [pc, #20]	; (800721c <CDC_Init_FS+0x20>)
 8007206:	f7fe fe42 	bl	8005e8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800720a:	4905      	ldr	r1, [pc, #20]	; (8007220 <CDC_Init_FS+0x24>)
 800720c:	4803      	ldr	r0, [pc, #12]	; (800721c <CDC_Init_FS+0x20>)
 800720e:	f7fe fe57 	bl	8005ec0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007212:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007214:	4618      	mov	r0, r3
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20001188 	.word	0x20001188
 800721c:	200006b8 	.word	0x200006b8
 8007220:	20000988 	.word	0x20000988

08007224 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007228:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800722a:	4618      	mov	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	6039      	str	r1, [r7, #0]
 800723e:	71fb      	strb	r3, [r7, #7]
 8007240:	4613      	mov	r3, r2
 8007242:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b23      	cmp	r3, #35	; 0x23
 8007248:	d85c      	bhi.n	8007304 <CDC_Control_FS+0xd0>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <CDC_Control_FS+0x1c>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007305 	.word	0x08007305
 8007254:	08007305 	.word	0x08007305
 8007258:	08007305 	.word	0x08007305
 800725c:	08007305 	.word	0x08007305
 8007260:	08007305 	.word	0x08007305
 8007264:	08007305 	.word	0x08007305
 8007268:	08007305 	.word	0x08007305
 800726c:	08007305 	.word	0x08007305
 8007270:	08007305 	.word	0x08007305
 8007274:	08007305 	.word	0x08007305
 8007278:	08007305 	.word	0x08007305
 800727c:	08007305 	.word	0x08007305
 8007280:	08007305 	.word	0x08007305
 8007284:	08007305 	.word	0x08007305
 8007288:	08007305 	.word	0x08007305
 800728c:	08007305 	.word	0x08007305
 8007290:	08007305 	.word	0x08007305
 8007294:	08007305 	.word	0x08007305
 8007298:	08007305 	.word	0x08007305
 800729c:	08007305 	.word	0x08007305
 80072a0:	08007305 	.word	0x08007305
 80072a4:	08007305 	.word	0x08007305
 80072a8:	08007305 	.word	0x08007305
 80072ac:	08007305 	.word	0x08007305
 80072b0:	08007305 	.word	0x08007305
 80072b4:	08007305 	.word	0x08007305
 80072b8:	08007305 	.word	0x08007305
 80072bc:	08007305 	.word	0x08007305
 80072c0:	08007305 	.word	0x08007305
 80072c4:	08007305 	.word	0x08007305
 80072c8:	08007305 	.word	0x08007305
 80072cc:	08007305 	.word	0x08007305
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072f3 	.word	0x080072f3
 80072d8:	08007305 	.word	0x08007305
 80072dc:	08007305 	.word	0x08007305
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 80072e0:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <CDC_Control_FS+0xe0>)
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	6810      	ldr	r0, [r2, #0]
 80072e6:	6018      	str	r0, [r3, #0]
 80072e8:	8891      	ldrh	r1, [r2, #4]
 80072ea:	7992      	ldrb	r2, [r2, #6]
 80072ec:	8099      	strh	r1, [r3, #4]
 80072ee:	719a      	strb	r2, [r3, #6]
    break;
 80072f0:	e009      	b.n	8007306 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	4a07      	ldr	r2, [pc, #28]	; (8007314 <CDC_Control_FS+0xe0>)
 80072f6:	6810      	ldr	r0, [r2, #0]
 80072f8:	6018      	str	r0, [r3, #0]
 80072fa:	8891      	ldrh	r1, [r2, #4]
 80072fc:	7992      	ldrb	r2, [r2, #6]
 80072fe:	8099      	strh	r1, [r3, #4]
 8007300:	719a      	strb	r2, [r3, #6]
    break;
 8007302:	e000      	b.n	8007306 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007304:	bf00      	nop
  }

  return (USBD_OK);
 8007306:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	2000051c 	.word	0x2000051c

08007318 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4810      	ldr	r0, [pc, #64]	; (8007368 <CDC_Receive_FS+0x50>)
 8007326:	f7fe fdcb 	bl	8005ec0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800732a:	480f      	ldr	r0, [pc, #60]	; (8007368 <CDC_Receive_FS+0x50>)
 800732c:	f7fe fddc 	bl	8005ee8 <USBD_CDC_ReceivePacket>

  i++;
 8007330:	4b0e      	ldr	r3, [pc, #56]	; (800736c <CDC_Receive_FS+0x54>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	4a0d      	ldr	r2, [pc, #52]	; (800736c <CDC_Receive_FS+0x54>)
 8007338:	6013      	str	r3, [r2, #0]
  image[i] = Buf[0];
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <CDC_Receive_FS+0x54>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	7811      	ldrb	r1, [r2, #0]
 8007342:	4a0b      	ldr	r2, [pc, #44]	; (8007370 <CDC_Receive_FS+0x58>)
 8007344:	54d1      	strb	r1, [r2, r3]
  if (i == 1024)
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <CDC_Receive_FS+0x54>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734e:	d105      	bne.n	800735c <CDC_Receive_FS+0x44>
  {
	  newFrameAvailable = 1;
 8007350:	4b08      	ldr	r3, [pc, #32]	; (8007374 <CDC_Receive_FS+0x5c>)
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
	  i = 0;
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <CDC_Receive_FS+0x54>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]
  }

  return (USBD_OK);
 800735c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	200006b8 	.word	0x200006b8
 800736c:	20000624 	.word	0x20000624
 8007370:	20000000 	.word	0x20000000
 8007374:	20000618 	.word	0x20000618

08007378 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800738a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800738e:	4618      	mov	r0, r3
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	6039      	str	r1, [r7, #0]
 80073a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2212      	movs	r2, #18
 80073ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20000558 	.word	0x20000558

080073c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2204      	movs	r2, #4
 80073d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073d2:	4b03      	ldr	r3, [pc, #12]	; (80073e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	20000578 	.word	0x20000578

080073e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4907      	ldr	r1, [pc, #28]	; (8007418 <USBD_FS_ProductStrDescriptor+0x34>)
 80073fa:	4808      	ldr	r0, [pc, #32]	; (800741c <USBD_FS_ProductStrDescriptor+0x38>)
 80073fc:	f7ff fded 	bl	8006fda <USBD_GetString>
 8007400:	e004      	b.n	800740c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	4904      	ldr	r1, [pc, #16]	; (8007418 <USBD_FS_ProductStrDescriptor+0x34>)
 8007406:	4805      	ldr	r0, [pc, #20]	; (800741c <USBD_FS_ProductStrDescriptor+0x38>)
 8007408:	f7ff fde7 	bl	8006fda <USBD_GetString>
  }
  return USBD_StrDesc;
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20001988 	.word	0x20001988
 800741c:	08007eac 	.word	0x08007eac

08007420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	4904      	ldr	r1, [pc, #16]	; (8007440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007430:	4804      	ldr	r0, [pc, #16]	; (8007444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007432:	f7ff fdd2 	bl	8006fda <USBD_GetString>
  return USBD_StrDesc;
 8007436:	4b02      	ldr	r3, [pc, #8]	; (8007440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20001988 	.word	0x20001988
 8007444:	08007ec4 	.word	0x08007ec4

08007448 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	221a      	movs	r2, #26
 8007458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800745a:	f000 f855 	bl	8007508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800745e:	4b02      	ldr	r3, [pc, #8]	; (8007468 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	2000057c 	.word	0x2000057c

0800746c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	4907      	ldr	r1, [pc, #28]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007482:	4808      	ldr	r0, [pc, #32]	; (80074a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007484:	f7ff fda9 	bl	8006fda <USBD_GetString>
 8007488:	e004      	b.n	8007494 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	4904      	ldr	r1, [pc, #16]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800748e:	4805      	ldr	r0, [pc, #20]	; (80074a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007490:	f7ff fda3 	bl	8006fda <USBD_GetString>
  }
  return USBD_StrDesc;
 8007494:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20001988 	.word	0x20001988
 80074a4:	08007ed8 	.word	0x08007ed8

080074a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	4907      	ldr	r1, [pc, #28]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074be:	4808      	ldr	r0, [pc, #32]	; (80074e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074c0:	f7ff fd8b 	bl	8006fda <USBD_GetString>
 80074c4:	e004      	b.n	80074d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	4904      	ldr	r1, [pc, #16]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074ca:	4805      	ldr	r0, [pc, #20]	; (80074e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074cc:	f7ff fd85 	bl	8006fda <USBD_GetString>
  }
  return USBD_StrDesc;
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20001988 	.word	0x20001988
 80074e0:	08007ee4 	.word	0x08007ee4

080074e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	220c      	movs	r2, #12
 80074f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80074f6:	4b03      	ldr	r3, [pc, #12]	; (8007504 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	2000056c 	.word	0x2000056c

08007508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <Get_SerialNum+0x44>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007514:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <Get_SerialNum+0x48>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800751a:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <Get_SerialNum+0x4c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800752e:	2208      	movs	r2, #8
 8007530:	4909      	ldr	r1, [pc, #36]	; (8007558 <Get_SerialNum+0x50>)
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f814 	bl	8007560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007538:	2204      	movs	r2, #4
 800753a:	4908      	ldr	r1, [pc, #32]	; (800755c <Get_SerialNum+0x54>)
 800753c:	68b8      	ldr	r0, [r7, #8]
 800753e:	f000 f80f 	bl	8007560 <IntToUnicode>
  }
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	1ff0f420 	.word	0x1ff0f420
 8007550:	1ff0f424 	.word	0x1ff0f424
 8007554:	1ff0f428 	.word	0x1ff0f428
 8007558:	2000057e 	.word	0x2000057e
 800755c:	2000058e 	.word	0x2000058e

08007560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]
 8007576:	e027      	b.n	80075c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	0f1b      	lsrs	r3, r3, #28
 800757c:	2b09      	cmp	r3, #9
 800757e:	d80b      	bhi.n	8007598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	0f1b      	lsrs	r3, r3, #28
 8007584:	b2da      	uxtb	r2, r3
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4619      	mov	r1, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	440b      	add	r3, r1
 8007590:	3230      	adds	r2, #48	; 0x30
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e00a      	b.n	80075ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0f1b      	lsrs	r3, r3, #28
 800759c:	b2da      	uxtb	r2, r3
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4619      	mov	r1, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	440b      	add	r3, r1
 80075a8:	3237      	adds	r2, #55	; 0x37
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	3301      	adds	r3, #1
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	2200      	movs	r2, #0
 80075c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	3301      	adds	r3, #1
 80075c6:	75fb      	strb	r3, [r7, #23]
 80075c8:	7dfa      	ldrb	r2, [r7, #23]
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d3d3      	bcc.n	8007578 <IntToUnicode+0x18>
  }
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	; 0x28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e4:	f107 0314 	add.w	r3, r7, #20
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	605a      	str	r2, [r3, #4]
 80075ee:	609a      	str	r2, [r3, #8]
 80075f0:	60da      	str	r2, [r3, #12]
 80075f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075fc:	d149      	bne.n	8007692 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075fe:	4b27      	ldr	r3, [pc, #156]	; (800769c <HAL_PCD_MspInit+0xc0>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	4a26      	ldr	r2, [pc, #152]	; (800769c <HAL_PCD_MspInit+0xc0>)
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	6313      	str	r3, [r2, #48]	; 0x30
 800760a:	4b24      	ldr	r3, [pc, #144]	; (800769c <HAL_PCD_MspInit+0xc0>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007616:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800761a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800761c:	2302      	movs	r3, #2
 800761e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007624:	2303      	movs	r3, #3
 8007626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007628:	230a      	movs	r3, #10
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800762c:	f107 0314 	add.w	r3, r7, #20
 8007630:	4619      	mov	r1, r3
 8007632:	481b      	ldr	r0, [pc, #108]	; (80076a0 <HAL_PCD_MspInit+0xc4>)
 8007634:	f7f9 fd82 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800763c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800763e:	2300      	movs	r3, #0
 8007640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007646:	f107 0314 	add.w	r3, r7, #20
 800764a:	4619      	mov	r1, r3
 800764c:	4814      	ldr	r0, [pc, #80]	; (80076a0 <HAL_PCD_MspInit+0xc4>)
 800764e:	f7f9 fd75 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <HAL_PCD_MspInit+0xc0>)
 8007654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007656:	4a11      	ldr	r2, [pc, #68]	; (800769c <HAL_PCD_MspInit+0xc0>)
 8007658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765c:	6353      	str	r3, [r2, #52]	; 0x34
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <HAL_PCD_MspInit+0xc0>)
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4b0c      	ldr	r3, [pc, #48]	; (800769c <HAL_PCD_MspInit+0xc0>)
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	4a0b      	ldr	r2, [pc, #44]	; (800769c <HAL_PCD_MspInit+0xc0>)
 8007670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007674:	6453      	str	r3, [r2, #68]	; 0x44
 8007676:	4b09      	ldr	r3, [pc, #36]	; (800769c <HAL_PCD_MspInit+0xc0>)
 8007678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800767e:	60bb      	str	r3, [r7, #8]
 8007680:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007682:	2200      	movs	r2, #0
 8007684:	2100      	movs	r1, #0
 8007686:	2043      	movs	r0, #67	; 0x43
 8007688:	f7f9 fd21 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800768c:	2043      	movs	r0, #67	; 0x43
 800768e:	f7f9 fd3a 	bl	8001106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007692:	bf00      	nop
 8007694:	3728      	adds	r7, #40	; 0x28
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40023800 	.word	0x40023800
 80076a0:	40020000 	.word	0x40020000

080076a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f7fe fce0 	bl	8006080 <USBD_LL_SetupStage>
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80076da:	78fa      	ldrb	r2, [r7, #3]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	1a9b      	subs	r3, r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	4619      	mov	r1, r3
 80076f2:	f7fe fd18 	bl	8006126 <USBD_LL_DataOutStage>
}
 80076f6:	bf00      	nop
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8007710:	78fa      	ldrb	r2, [r7, #3]
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	3348      	adds	r3, #72	; 0x48
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	4619      	mov	r1, r3
 8007726:	f7fe fd61 	bl	80061ec <USBD_LL_DataInStage>
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe fe65 	bl	8006410 <USBD_LL_SOF>
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007756:	2301      	movs	r3, #1
 8007758:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	e008      	b.n	800777a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d102      	bne.n	8007776 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
 8007774:	e001      	b.n	800777a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007776:	f7f9 f899 	bl	80008ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007780:	7bfa      	ldrb	r2, [r7, #15]
 8007782:	4611      	mov	r1, r2
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fe08 	bl	800639a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fdc1 	bl	8006318 <USBD_LL_Reset>
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fe03 	bl	80063ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077c6:	f043 0301 	orr.w	r3, r3, #1
 80077ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d005      	beq.n	80077e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <HAL_PCD_SuspendCallback+0x48>)
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	4a03      	ldr	r2, [pc, #12]	; (80077e8 <HAL_PCD_SuspendCallback+0x48>)
 80077da:	f043 0306 	orr.w	r3, r3, #6
 80077de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	e000ed00 	.word	0xe000ed00

080077ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fdf2 	bl	80063e4 <USBD_LL_Resume>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800781a:	78fa      	ldrb	r2, [r7, #3]
 800781c:	4611      	mov	r1, r2
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fe1d 	bl	800645e <USBD_LL_IsoOUTIncomplete>
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	4611      	mov	r1, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fdfe 	bl	8006444 <USBD_LL_IsoINIncomplete>
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fe0a 	bl	8006478 <USBD_LL_DevConnected>
}
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800787a:	4618      	mov	r0, r3
 800787c:	f7fe fe07 	bl	800648e <USBD_LL_DevDisconnected>
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d13c      	bne.n	8007912 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007898:	4a20      	ldr	r2, [pc, #128]	; (800791c <USBD_LL_Init+0x94>)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a1e      	ldr	r2, [pc, #120]	; (800791c <USBD_LL_Init+0x94>)
 80078a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078a8:	4b1c      	ldr	r3, [pc, #112]	; (800791c <USBD_LL_Init+0x94>)
 80078aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80078b0:	4b1a      	ldr	r3, [pc, #104]	; (800791c <USBD_LL_Init+0x94>)
 80078b2:	2206      	movs	r2, #6
 80078b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078b6:	4b19      	ldr	r3, [pc, #100]	; (800791c <USBD_LL_Init+0x94>)
 80078b8:	2202      	movs	r2, #2
 80078ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078bc:	4b17      	ldr	r3, [pc, #92]	; (800791c <USBD_LL_Init+0x94>)
 80078be:	2200      	movs	r2, #0
 80078c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078c2:	4b16      	ldr	r3, [pc, #88]	; (800791c <USBD_LL_Init+0x94>)
 80078c4:	2202      	movs	r2, #2
 80078c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80078c8:	4b14      	ldr	r3, [pc, #80]	; (800791c <USBD_LL_Init+0x94>)
 80078ca:	2201      	movs	r2, #1
 80078cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <USBD_LL_Init+0x94>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078d4:	4b11      	ldr	r3, [pc, #68]	; (800791c <USBD_LL_Init+0x94>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80078da:	4b10      	ldr	r3, [pc, #64]	; (800791c <USBD_LL_Init+0x94>)
 80078dc:	2201      	movs	r2, #1
 80078de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078e0:	4b0e      	ldr	r3, [pc, #56]	; (800791c <USBD_LL_Init+0x94>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078e6:	480d      	ldr	r0, [pc, #52]	; (800791c <USBD_LL_Init+0x94>)
 80078e8:	f7f9 fdeb 	bl	80014c2 <HAL_PCD_Init>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078f2:	f7f8 ffdb 	bl	80008ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078f6:	2180      	movs	r1, #128	; 0x80
 80078f8:	4808      	ldr	r0, [pc, #32]	; (800791c <USBD_LL_Init+0x94>)
 80078fa:	f7fa ff6c 	bl	80027d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078fe:	2240      	movs	r2, #64	; 0x40
 8007900:	2100      	movs	r1, #0
 8007902:	4806      	ldr	r0, [pc, #24]	; (800791c <USBD_LL_Init+0x94>)
 8007904:	f7fa ff20 	bl	8002748 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007908:	2280      	movs	r2, #128	; 0x80
 800790a:	2101      	movs	r1, #1
 800790c:	4803      	ldr	r0, [pc, #12]	; (800791c <USBD_LL_Init+0x94>)
 800790e:	f7fa ff1b 	bl	8002748 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20001b88 	.word	0x20001b88

08007920 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007936:	4618      	mov	r0, r3
 8007938:	f7f9 fee7 	bl	800170a <HAL_PCD_Start>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f97e 	bl	8007c44 <USBD_Get_USB_Status>
 8007948:	4603      	mov	r3, r0
 800794a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800794c:	7bbb      	ldrb	r3, [r7, #14]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	461a      	mov	r2, r3
 8007964:	4603      	mov	r3, r0
 8007966:	70fb      	strb	r3, [r7, #3]
 8007968:	460b      	mov	r3, r1
 800796a:	70bb      	strb	r3, [r7, #2]
 800796c:	4613      	mov	r3, r2
 800796e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800797e:	78bb      	ldrb	r3, [r7, #2]
 8007980:	883a      	ldrh	r2, [r7, #0]
 8007982:	78f9      	ldrb	r1, [r7, #3]
 8007984:	f7fa fae7 	bl	8001f56 <HAL_PCD_EP_Open>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 f958 	bl	8007c44 <USBD_Get_USB_Status>
 8007994:	4603      	mov	r3, r0
 8007996:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007998:	7bbb      	ldrb	r3, [r7, #14]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fa fb30 	bl	8002026 <HAL_PCD_EP_Close>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 f939 	bl	8007c44 <USBD_Get_USB_Status>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fa fc08 	bl	8002214 <HAL_PCD_EP_SetStall>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f91a 	bl	8007c44 <USBD_Get_USB_Status>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fa fc4d 	bl	80022dc <HAL_PCD_EP_ClrStall>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 f8fb 	bl	8007c44 <USBD_Get_USB_Status>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a6e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	da0b      	bge.n	8007a90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	4613      	mov	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	440b      	add	r3, r1
 8007a8a:	333e      	adds	r3, #62	; 0x3e
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	e00b      	b.n	8007aa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007aa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fa fa1a 	bl	8001f0c <HAL_PCD_SetAddress>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 f8b0 	bl	8007c44 <USBD_Get_USB_Status>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
 8007afe:	460b      	mov	r3, r1
 8007b00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b10:	7af9      	ldrb	r1, [r7, #11]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	f7fa fb33 	bl	8002180 <HAL_PCD_EP_Transmit>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f88f 	bl	8007c44 <USBD_Get_USB_Status>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007b2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	607a      	str	r2, [r7, #4]
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	460b      	mov	r3, r1
 8007b42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b52:	7af9      	ldrb	r1, [r7, #11]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	f7fa faaf 	bl	80020ba <HAL_PCD_EP_Receive>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f86e 	bl	8007c44 <USBD_Get_USB_Status>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007b6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fa fadf 	bl	8002150 <HAL_PCD_EP_GetRxCount>
 8007b92:	4603      	mov	r3, r0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_PCDEx_LPM_Callback+0x18>
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d01f      	beq.n	8007bf2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8007bb2:	e03b      	b.n	8007c2c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007bbc:	f000 f83c 	bl	8007c38 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bc6:	f023 0306 	bic.w	r3, r3, #6
 8007bca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fbfa 	bl	80063e4 <USBD_LL_Resume>
    break;
 8007bf0:	e01c      	b.n	8007c2c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6812      	ldr	r2, [r2, #0]
 8007c00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fbd2 	bl	80063ba <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <HAL_PCDEx_LPM_Callback+0x98>)
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	4a04      	ldr	r2, [pc, #16]	; (8007c34 <HAL_PCDEx_LPM_Callback+0x98>)
 8007c24:	f043 0306 	orr.w	r3, r3, #6
 8007c28:	6113      	str	r3, [r2, #16]
    break;   
 8007c2a:	bf00      	nop
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	e000ed00 	.word	0xe000ed00

08007c38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007c3c:	f7f8 fc9a 	bl	8000574 <SystemClock_Config>
}
 8007c40:	bf00      	nop
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d817      	bhi.n	8007c88 <USBD_Get_USB_Status+0x44>
 8007c58:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <USBD_Get_USB_Status+0x1c>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007c71 	.word	0x08007c71
 8007c64:	08007c77 	.word	0x08007c77
 8007c68:	08007c7d 	.word	0x08007c7d
 8007c6c:	08007c83 	.word	0x08007c83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
    break;
 8007c74:	e00b      	b.n	8007c8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7a:	e008      	b.n	8007c8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c80:	e005      	b.n	8007c8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c82:	2303      	movs	r3, #3
 8007c84:	73fb      	strb	r3, [r7, #15]
    break;
 8007c86:	e002      	b.n	8007c8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c8c:	bf00      	nop
  }
  return usb_status;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <__errno>:
 8007c9c:	4b01      	ldr	r3, [pc, #4]	; (8007ca4 <__errno+0x8>)
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20000598 	.word	0x20000598

08007ca8 <__libc_init_array>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4e0d      	ldr	r6, [pc, #52]	; (8007ce0 <__libc_init_array+0x38>)
 8007cac:	4c0d      	ldr	r4, [pc, #52]	; (8007ce4 <__libc_init_array+0x3c>)
 8007cae:	1ba4      	subs	r4, r4, r6
 8007cb0:	10a4      	asrs	r4, r4, #2
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	42a5      	cmp	r5, r4
 8007cb6:	d109      	bne.n	8007ccc <__libc_init_array+0x24>
 8007cb8:	4e0b      	ldr	r6, [pc, #44]	; (8007ce8 <__libc_init_array+0x40>)
 8007cba:	4c0c      	ldr	r4, [pc, #48]	; (8007cec <__libc_init_array+0x44>)
 8007cbc:	f000 f8ea 	bl	8007e94 <_init>
 8007cc0:	1ba4      	subs	r4, r4, r6
 8007cc2:	10a4      	asrs	r4, r4, #2
 8007cc4:	2500      	movs	r5, #0
 8007cc6:	42a5      	cmp	r5, r4
 8007cc8:	d105      	bne.n	8007cd6 <__libc_init_array+0x2e>
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cd0:	4798      	blx	r3
 8007cd2:	3501      	adds	r5, #1
 8007cd4:	e7ee      	b.n	8007cb4 <__libc_init_array+0xc>
 8007cd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cda:	4798      	blx	r3
 8007cdc:	3501      	adds	r5, #1
 8007cde:	e7f2      	b.n	8007cc6 <__libc_init_array+0x1e>
 8007ce0:	08007f14 	.word	0x08007f14
 8007ce4:	08007f14 	.word	0x08007f14
 8007ce8:	08007f14 	.word	0x08007f14
 8007cec:	08007f18 	.word	0x08007f18

08007cf0 <malloc>:
 8007cf0:	4b02      	ldr	r3, [pc, #8]	; (8007cfc <malloc+0xc>)
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f000 b861 	b.w	8007dbc <_malloc_r>
 8007cfa:	bf00      	nop
 8007cfc:	20000598 	.word	0x20000598

08007d00 <free>:
 8007d00:	4b02      	ldr	r3, [pc, #8]	; (8007d0c <free+0xc>)
 8007d02:	4601      	mov	r1, r0
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	f000 b80b 	b.w	8007d20 <_free_r>
 8007d0a:	bf00      	nop
 8007d0c:	20000598 	.word	0x20000598

08007d10 <memset>:
 8007d10:	4402      	add	r2, r0
 8007d12:	4603      	mov	r3, r0
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d100      	bne.n	8007d1a <memset+0xa>
 8007d18:	4770      	bx	lr
 8007d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1e:	e7f9      	b.n	8007d14 <memset+0x4>

08007d20 <_free_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4605      	mov	r5, r0
 8007d24:	2900      	cmp	r1, #0
 8007d26:	d045      	beq.n	8007db4 <_free_r+0x94>
 8007d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d2c:	1f0c      	subs	r4, r1, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bfb8      	it	lt
 8007d32:	18e4      	addlt	r4, r4, r3
 8007d34:	f000 f8ac 	bl	8007e90 <__malloc_lock>
 8007d38:	4a1f      	ldr	r2, [pc, #124]	; (8007db8 <_free_r+0x98>)
 8007d3a:	6813      	ldr	r3, [r2, #0]
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	b933      	cbnz	r3, 8007d4e <_free_r+0x2e>
 8007d40:	6063      	str	r3, [r4, #4]
 8007d42:	6014      	str	r4, [r2, #0]
 8007d44:	4628      	mov	r0, r5
 8007d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d4a:	f000 b8a2 	b.w	8007e92 <__malloc_unlock>
 8007d4e:	42a3      	cmp	r3, r4
 8007d50:	d90c      	bls.n	8007d6c <_free_r+0x4c>
 8007d52:	6821      	ldr	r1, [r4, #0]
 8007d54:	1862      	adds	r2, r4, r1
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bf04      	itt	eq
 8007d5a:	681a      	ldreq	r2, [r3, #0]
 8007d5c:	685b      	ldreq	r3, [r3, #4]
 8007d5e:	6063      	str	r3, [r4, #4]
 8007d60:	bf04      	itt	eq
 8007d62:	1852      	addeq	r2, r2, r1
 8007d64:	6022      	streq	r2, [r4, #0]
 8007d66:	6004      	str	r4, [r0, #0]
 8007d68:	e7ec      	b.n	8007d44 <_free_r+0x24>
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	b10a      	cbz	r2, 8007d74 <_free_r+0x54>
 8007d70:	42a2      	cmp	r2, r4
 8007d72:	d9fa      	bls.n	8007d6a <_free_r+0x4a>
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	1858      	adds	r0, r3, r1
 8007d78:	42a0      	cmp	r0, r4
 8007d7a:	d10b      	bne.n	8007d94 <_free_r+0x74>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	4401      	add	r1, r0
 8007d80:	1858      	adds	r0, r3, r1
 8007d82:	4282      	cmp	r2, r0
 8007d84:	6019      	str	r1, [r3, #0]
 8007d86:	d1dd      	bne.n	8007d44 <_free_r+0x24>
 8007d88:	6810      	ldr	r0, [r2, #0]
 8007d8a:	6852      	ldr	r2, [r2, #4]
 8007d8c:	605a      	str	r2, [r3, #4]
 8007d8e:	4401      	add	r1, r0
 8007d90:	6019      	str	r1, [r3, #0]
 8007d92:	e7d7      	b.n	8007d44 <_free_r+0x24>
 8007d94:	d902      	bls.n	8007d9c <_free_r+0x7c>
 8007d96:	230c      	movs	r3, #12
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	e7d3      	b.n	8007d44 <_free_r+0x24>
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	1821      	adds	r1, r4, r0
 8007da0:	428a      	cmp	r2, r1
 8007da2:	bf04      	itt	eq
 8007da4:	6811      	ldreq	r1, [r2, #0]
 8007da6:	6852      	ldreq	r2, [r2, #4]
 8007da8:	6062      	str	r2, [r4, #4]
 8007daa:	bf04      	itt	eq
 8007dac:	1809      	addeq	r1, r1, r0
 8007dae:	6021      	streq	r1, [r4, #0]
 8007db0:	605c      	str	r4, [r3, #4]
 8007db2:	e7c7      	b.n	8007d44 <_free_r+0x24>
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	bf00      	nop
 8007db8:	20000628 	.word	0x20000628

08007dbc <_malloc_r>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	1ccd      	adds	r5, r1, #3
 8007dc0:	f025 0503 	bic.w	r5, r5, #3
 8007dc4:	3508      	adds	r5, #8
 8007dc6:	2d0c      	cmp	r5, #12
 8007dc8:	bf38      	it	cc
 8007dca:	250c      	movcc	r5, #12
 8007dcc:	2d00      	cmp	r5, #0
 8007dce:	4606      	mov	r6, r0
 8007dd0:	db01      	blt.n	8007dd6 <_malloc_r+0x1a>
 8007dd2:	42a9      	cmp	r1, r5
 8007dd4:	d903      	bls.n	8007dde <_malloc_r+0x22>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	6033      	str	r3, [r6, #0]
 8007dda:	2000      	movs	r0, #0
 8007ddc:	bd70      	pop	{r4, r5, r6, pc}
 8007dde:	f000 f857 	bl	8007e90 <__malloc_lock>
 8007de2:	4a21      	ldr	r2, [pc, #132]	; (8007e68 <_malloc_r+0xac>)
 8007de4:	6814      	ldr	r4, [r2, #0]
 8007de6:	4621      	mov	r1, r4
 8007de8:	b991      	cbnz	r1, 8007e10 <_malloc_r+0x54>
 8007dea:	4c20      	ldr	r4, [pc, #128]	; (8007e6c <_malloc_r+0xb0>)
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	b91b      	cbnz	r3, 8007df8 <_malloc_r+0x3c>
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 f83d 	bl	8007e70 <_sbrk_r>
 8007df6:	6020      	str	r0, [r4, #0]
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 f838 	bl	8007e70 <_sbrk_r>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d124      	bne.n	8007e4e <_malloc_r+0x92>
 8007e04:	230c      	movs	r3, #12
 8007e06:	6033      	str	r3, [r6, #0]
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f842 	bl	8007e92 <__malloc_unlock>
 8007e0e:	e7e4      	b.n	8007dda <_malloc_r+0x1e>
 8007e10:	680b      	ldr	r3, [r1, #0]
 8007e12:	1b5b      	subs	r3, r3, r5
 8007e14:	d418      	bmi.n	8007e48 <_malloc_r+0x8c>
 8007e16:	2b0b      	cmp	r3, #11
 8007e18:	d90f      	bls.n	8007e3a <_malloc_r+0x7e>
 8007e1a:	600b      	str	r3, [r1, #0]
 8007e1c:	50cd      	str	r5, [r1, r3]
 8007e1e:	18cc      	adds	r4, r1, r3
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 f836 	bl	8007e92 <__malloc_unlock>
 8007e26:	f104 000b 	add.w	r0, r4, #11
 8007e2a:	1d23      	adds	r3, r4, #4
 8007e2c:	f020 0007 	bic.w	r0, r0, #7
 8007e30:	1ac3      	subs	r3, r0, r3
 8007e32:	d0d3      	beq.n	8007ddc <_malloc_r+0x20>
 8007e34:	425a      	negs	r2, r3
 8007e36:	50e2      	str	r2, [r4, r3]
 8007e38:	e7d0      	b.n	8007ddc <_malloc_r+0x20>
 8007e3a:	428c      	cmp	r4, r1
 8007e3c:	684b      	ldr	r3, [r1, #4]
 8007e3e:	bf16      	itet	ne
 8007e40:	6063      	strne	r3, [r4, #4]
 8007e42:	6013      	streq	r3, [r2, #0]
 8007e44:	460c      	movne	r4, r1
 8007e46:	e7eb      	b.n	8007e20 <_malloc_r+0x64>
 8007e48:	460c      	mov	r4, r1
 8007e4a:	6849      	ldr	r1, [r1, #4]
 8007e4c:	e7cc      	b.n	8007de8 <_malloc_r+0x2c>
 8007e4e:	1cc4      	adds	r4, r0, #3
 8007e50:	f024 0403 	bic.w	r4, r4, #3
 8007e54:	42a0      	cmp	r0, r4
 8007e56:	d005      	beq.n	8007e64 <_malloc_r+0xa8>
 8007e58:	1a21      	subs	r1, r4, r0
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 f808 	bl	8007e70 <_sbrk_r>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d0cf      	beq.n	8007e04 <_malloc_r+0x48>
 8007e64:	6025      	str	r5, [r4, #0]
 8007e66:	e7db      	b.n	8007e20 <_malloc_r+0x64>
 8007e68:	20000628 	.word	0x20000628
 8007e6c:	2000062c 	.word	0x2000062c

08007e70 <_sbrk_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4c06      	ldr	r4, [pc, #24]	; (8007e8c <_sbrk_r+0x1c>)
 8007e74:	2300      	movs	r3, #0
 8007e76:	4605      	mov	r5, r0
 8007e78:	4608      	mov	r0, r1
 8007e7a:	6023      	str	r3, [r4, #0]
 8007e7c:	f7f8 ff62 	bl	8000d44 <_sbrk>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_sbrk_r+0x1a>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_sbrk_r+0x1a>
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20001f8c 	.word	0x20001f8c

08007e90 <__malloc_lock>:
 8007e90:	4770      	bx	lr

08007e92 <__malloc_unlock>:
 8007e92:	4770      	bx	lr

08007e94 <_init>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	bf00      	nop
 8007e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9a:	bc08      	pop	{r3}
 8007e9c:	469e      	mov	lr, r3
 8007e9e:	4770      	bx	lr

08007ea0 <_fini>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	bf00      	nop
 8007ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea6:	bc08      	pop	{r3}
 8007ea8:	469e      	mov	lr, r3
 8007eaa:	4770      	bx	lr
